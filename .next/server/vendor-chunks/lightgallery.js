"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/lightgallery";
exports.ids = ["vendor-chunks/lightgallery"];
exports.modules = {

/***/ "(ssr)/./node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.es5.js":
/*!*************************************************************************!*\
  !*** ./node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.es5.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * lightgallery | 2.7.2 | September 20th 2023\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */ /*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar thumbnailsSettings = {\n    thumbnail: true,\n    animateThumb: true,\n    currentPagerPosition: \"middle\",\n    alignThumbnails: \"middle\",\n    thumbWidth: 100,\n    thumbHeight: \"80px\",\n    thumbMargin: 5,\n    appendThumbnailsTo: \".lg-components\",\n    toggleThumb: false,\n    enableThumbDrag: true,\n    enableThumbSwipe: true,\n    thumbnailSwipeThreshold: 10,\n    loadYouTubeThumbnail: true,\n    youTubeThumbSize: 1,\n    thumbnailPluginStrings: {\n        toggleThumbnails: \"Toggle thumbnails\"\n    }\n};\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */ var lGEvents = {\n    afterAppendSlide: \"lgAfterAppendSlide\",\n    init: \"lgInit\",\n    hasVideo: \"lgHasVideo\",\n    containerResize: \"lgContainerResize\",\n    updateSlides: \"lgUpdateSlides\",\n    afterAppendSubHtml: \"lgAfterAppendSubHtml\",\n    beforeOpen: \"lgBeforeOpen\",\n    afterOpen: \"lgAfterOpen\",\n    slideItemLoad: \"lgSlideItemLoad\",\n    beforeSlide: \"lgBeforeSlide\",\n    afterSlide: \"lgAfterSlide\",\n    posterClick: \"lgPosterClick\",\n    dragStart: \"lgDragStart\",\n    dragMove: \"lgDragMove\",\n    dragEnd: \"lgDragEnd\",\n    beforeNextSlide: \"lgBeforeNextSlide\",\n    beforePrevSlide: \"lgBeforePrevSlide\",\n    beforeClose: \"lgBeforeClose\",\n    afterClose: \"lgAfterClose\",\n    rotateLeft: \"lgRotateLeft\",\n    rotateRight: \"lgRotateRight\",\n    flipHorizontal: \"lgFlipHorizontal\",\n    flipVertical: \"lgFlipVertical\",\n    autoplay: \"lgAutoplay\",\n    autoplayStart: \"lgAutoplayStart\",\n    autoplayStop: \"lgAutoplayStop\"\n};\nvar Thumbnail = /** @class */ function() {\n    function Thumbnail(instance, $LG) {\n        this.thumbOuterWidth = 0;\n        this.thumbTotalWidth = 0;\n        this.translateX = 0;\n        this.thumbClickable = false;\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n        return this;\n    }\n    Thumbnail.prototype.init = function() {\n        // extend module default settings with lightGallery core settings\n        this.settings = __assign(__assign({}, thumbnailsSettings), this.core.settings);\n        this.thumbOuterWidth = 0;\n        this.thumbTotalWidth = this.core.galleryItems.length * (this.settings.thumbWidth + this.settings.thumbMargin);\n        // Thumbnail animation value\n        this.translateX = 0;\n        this.setAnimateThumbStyles();\n        if (!this.core.settings.allowMediaOverlap) {\n            this.settings.toggleThumb = false;\n        }\n        if (this.settings.thumbnail) {\n            this.build();\n            if (this.settings.animateThumb) {\n                if (this.settings.enableThumbDrag) {\n                    this.enableThumbDrag();\n                }\n                if (this.settings.enableThumbSwipe) {\n                    this.enableThumbSwipe();\n                }\n                this.thumbClickable = false;\n            } else {\n                this.thumbClickable = true;\n            }\n            this.toggleThumbBar();\n            this.thumbKeyPress();\n        }\n    };\n    Thumbnail.prototype.build = function() {\n        var _this = this;\n        this.setThumbMarkup();\n        this.manageActiveClassOnSlideChange();\n        this.$lgThumb.first().on(\"click.lg touchend.lg\", function(e) {\n            var $target = _this.$LG(e.target);\n            if (!$target.hasAttribute(\"data-lg-item-id\")) {\n                return;\n            }\n            setTimeout(function() {\n                // In IE9 and bellow touch does not support\n                // Go to slide if browser does not support css transitions\n                if (_this.thumbClickable && !_this.core.lgBusy) {\n                    var index = parseInt($target.attr(\"data-lg-item-id\"));\n                    _this.core.slide(index, false, true, false);\n                }\n            }, 50);\n        });\n        this.core.LGel.on(lGEvents.beforeSlide + \".thumb\", function(event) {\n            var index = event.detail.index;\n            _this.animateThumb(index);\n        });\n        this.core.LGel.on(lGEvents.beforeOpen + \".thumb\", function() {\n            _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\n        });\n        this.core.LGel.on(lGEvents.updateSlides + \".thumb\", function() {\n            _this.rebuildThumbnails();\n        });\n        this.core.LGel.on(lGEvents.containerResize + \".thumb\", function() {\n            if (!_this.core.lgOpened) return;\n            setTimeout(function() {\n                _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\n                _this.animateThumb(_this.core.index);\n                _this.thumbOuterWidth = _this.core.outer.get().offsetWidth;\n            }, 50);\n        });\n    };\n    Thumbnail.prototype.setThumbMarkup = function() {\n        var thumbOuterClassNames = \"lg-thumb-outer \";\n        if (this.settings.alignThumbnails) {\n            thumbOuterClassNames += \"lg-thumb-align-\" + this.settings.alignThumbnails;\n        }\n        var html = '<div class=\"' + thumbOuterClassNames + '\">\\n        <div class=\"lg-thumb lg-group\">\\n        </div>\\n        </div>';\n        this.core.outer.addClass(\"lg-has-thumb\");\n        if (this.settings.appendThumbnailsTo === \".lg-components\") {\n            this.core.$lgComponents.append(html);\n        } else {\n            this.core.outer.append(html);\n        }\n        this.$thumbOuter = this.core.outer.find(\".lg-thumb-outer\").first();\n        this.$lgThumb = this.core.outer.find(\".lg-thumb\").first();\n        if (this.settings.animateThumb) {\n            this.core.outer.find(\".lg-thumb\").css(\"transition-duration\", this.core.settings.speed + \"ms\").css(\"width\", this.thumbTotalWidth + \"px\").css(\"position\", \"relative\");\n        }\n        this.setThumbItemHtml(this.core.galleryItems);\n    };\n    Thumbnail.prototype.enableThumbDrag = function() {\n        var _this = this;\n        var thumbDragUtils = {\n            cords: {\n                startX: 0,\n                endX: 0\n            },\n            isMoved: false,\n            newTranslateX: 0,\n            startTime: new Date(),\n            endTime: new Date(),\n            touchMoveTime: 0\n        };\n        var isDragging = false;\n        this.$thumbOuter.addClass(\"lg-grab\");\n        this.core.outer.find(\".lg-thumb\").first().on(\"mousedown.lg.thumb\", function(e) {\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                // execute only on .lg-object\n                e.preventDefault();\n                thumbDragUtils.cords.startX = e.pageX;\n                thumbDragUtils.startTime = new Date();\n                _this.thumbClickable = false;\n                isDragging = true;\n                // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                _this.core.outer.get().scrollLeft += 1;\n                _this.core.outer.get().scrollLeft -= 1;\n                // *\n                _this.$thumbOuter.removeClass(\"lg-grab\").addClass(\"lg-grabbing\");\n            }\n        });\n        this.$LG(window).on(\"mousemove.lg.thumb.global\" + this.core.lgId, function(e) {\n            if (!_this.core.lgOpened) return;\n            if (isDragging) {\n                thumbDragUtils.cords.endX = e.pageX;\n                thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);\n            }\n        });\n        this.$LG(window).on(\"mouseup.lg.thumb.global\" + this.core.lgId, function() {\n            if (!_this.core.lgOpened) return;\n            if (thumbDragUtils.isMoved) {\n                thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);\n            } else {\n                _this.thumbClickable = true;\n            }\n            if (isDragging) {\n                isDragging = false;\n                _this.$thumbOuter.removeClass(\"lg-grabbing\").addClass(\"lg-grab\");\n            }\n        });\n    };\n    Thumbnail.prototype.enableThumbSwipe = function() {\n        var _this = this;\n        var thumbDragUtils = {\n            cords: {\n                startX: 0,\n                endX: 0\n            },\n            isMoved: false,\n            newTranslateX: 0,\n            startTime: new Date(),\n            endTime: new Date(),\n            touchMoveTime: 0\n        };\n        this.$lgThumb.on(\"touchstart.lg\", function(e) {\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                e.preventDefault();\n                thumbDragUtils.cords.startX = e.targetTouches[0].pageX;\n                _this.thumbClickable = false;\n                thumbDragUtils.startTime = new Date();\n            }\n        });\n        this.$lgThumb.on(\"touchmove.lg\", function(e) {\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\n                e.preventDefault();\n                thumbDragUtils.cords.endX = e.targetTouches[0].pageX;\n                thumbDragUtils = _this.onThumbTouchMove(thumbDragUtils);\n            }\n        });\n        this.$lgThumb.on(\"touchend.lg\", function() {\n            if (thumbDragUtils.isMoved) {\n                thumbDragUtils = _this.onThumbTouchEnd(thumbDragUtils);\n            } else {\n                _this.thumbClickable = true;\n            }\n        });\n    };\n    // Rebuild thumbnails\n    Thumbnail.prototype.rebuildThumbnails = function() {\n        var _this = this;\n        // Remove transitions\n        this.$thumbOuter.addClass(\"lg-rebuilding-thumbnails\");\n        setTimeout(function() {\n            _this.thumbTotalWidth = _this.core.galleryItems.length * (_this.settings.thumbWidth + _this.settings.thumbMargin);\n            _this.$lgThumb.css(\"width\", _this.thumbTotalWidth + \"px\");\n            _this.$lgThumb.empty();\n            _this.setThumbItemHtml(_this.core.galleryItems);\n            _this.animateThumb(_this.core.index);\n        }, 50);\n        setTimeout(function() {\n            _this.$thumbOuter.removeClass(\"lg-rebuilding-thumbnails\");\n        }, 200);\n    };\n    // @ts-check\n    Thumbnail.prototype.setTranslate = function(value) {\n        this.$lgThumb.css(\"transform\", \"translate3d(-\" + value + \"px, 0px, 0px)\");\n    };\n    Thumbnail.prototype.getPossibleTransformX = function(left) {\n        if (left > this.thumbTotalWidth - this.thumbOuterWidth) {\n            left = this.thumbTotalWidth - this.thumbOuterWidth;\n        }\n        if (left < 0) {\n            left = 0;\n        }\n        return left;\n    };\n    Thumbnail.prototype.animateThumb = function(index) {\n        this.$lgThumb.css(\"transition-duration\", this.core.settings.speed + \"ms\");\n        if (this.settings.animateThumb) {\n            var position = 0;\n            switch(this.settings.currentPagerPosition){\n                case \"left\":\n                    position = 0;\n                    break;\n                case \"middle\":\n                    position = this.thumbOuterWidth / 2 - this.settings.thumbWidth / 2;\n                    break;\n                case \"right\":\n                    position = this.thumbOuterWidth - this.settings.thumbWidth;\n            }\n            this.translateX = (this.settings.thumbWidth + this.settings.thumbMargin) * index - 1 - position;\n            if (this.translateX > this.thumbTotalWidth - this.thumbOuterWidth) {\n                this.translateX = this.thumbTotalWidth - this.thumbOuterWidth;\n            }\n            if (this.translateX < 0) {\n                this.translateX = 0;\n            }\n            this.setTranslate(this.translateX);\n        }\n    };\n    Thumbnail.prototype.onThumbTouchMove = function(thumbDragUtils) {\n        thumbDragUtils.newTranslateX = this.translateX;\n        thumbDragUtils.isMoved = true;\n        thumbDragUtils.touchMoveTime = new Date().valueOf();\n        thumbDragUtils.newTranslateX -= thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\n        thumbDragUtils.newTranslateX = this.getPossibleTransformX(thumbDragUtils.newTranslateX);\n        // move current slide\n        this.setTranslate(thumbDragUtils.newTranslateX);\n        this.$thumbOuter.addClass(\"lg-dragging\");\n        return thumbDragUtils;\n    };\n    Thumbnail.prototype.onThumbTouchEnd = function(thumbDragUtils) {\n        thumbDragUtils.isMoved = false;\n        thumbDragUtils.endTime = new Date();\n        this.$thumbOuter.removeClass(\"lg-dragging\");\n        var touchDuration = thumbDragUtils.endTime.valueOf() - thumbDragUtils.startTime.valueOf();\n        var distanceXnew = thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\n        var speedX = Math.abs(distanceXnew) / touchDuration;\n        // Some magical numbers\n        // Can be improved\n        if (speedX > 0.15 && thumbDragUtils.endTime.valueOf() - thumbDragUtils.touchMoveTime < 30) {\n            speedX += 1;\n            if (speedX > 2) {\n                speedX += 1;\n            }\n            speedX = speedX + speedX * (Math.abs(distanceXnew) / this.thumbOuterWidth);\n            this.$lgThumb.css(\"transition-duration\", Math.min(speedX - 1, 2) + \"settings\");\n            distanceXnew = distanceXnew * speedX;\n            this.translateX = this.getPossibleTransformX(this.translateX - distanceXnew);\n            this.setTranslate(this.translateX);\n        } else {\n            this.translateX = thumbDragUtils.newTranslateX;\n        }\n        if (Math.abs(thumbDragUtils.cords.endX - thumbDragUtils.cords.startX) < this.settings.thumbnailSwipeThreshold) {\n            this.thumbClickable = true;\n        }\n        return thumbDragUtils;\n    };\n    Thumbnail.prototype.getThumbHtml = function(thumb, index, alt) {\n        var slideVideoInfo = this.core.galleryItems[index].__slideVideoInfo || {};\n        var thumbImg;\n        if (slideVideoInfo.youtube) {\n            if (this.settings.loadYouTubeThumbnail) {\n                thumbImg = \"//img.youtube.com/vi/\" + slideVideoInfo.youtube[1] + \"/\" + this.settings.youTubeThumbSize + \".jpg\";\n            } else {\n                thumbImg = thumb;\n            }\n        } else {\n            thumbImg = thumb;\n        }\n        var altAttr = alt ? 'alt=\"' + alt + '\"' : \"\";\n        return '<div data-lg-item-id=\"' + index + '\" class=\"lg-thumb-item ' + (index === this.core.index ? \" active\" : \"\") + '\"\\n        style=\"width:' + this.settings.thumbWidth + \"px; height: \" + this.settings.thumbHeight + \";\\n            margin-right: \" + this.settings.thumbMargin + 'px;\">\\n            <img ' + altAttr + ' data-lg-item-id=\"' + index + '\" src=\"' + thumbImg + '\" />\\n        </div>';\n    };\n    Thumbnail.prototype.getThumbItemHtml = function(items) {\n        var thumbList = \"\";\n        for(var i = 0; i < items.length; i++){\n            thumbList += this.getThumbHtml(items[i].thumb, i, items[i].alt);\n        }\n        return thumbList;\n    };\n    Thumbnail.prototype.setThumbItemHtml = function(items) {\n        var thumbList = this.getThumbItemHtml(items);\n        this.$lgThumb.html(thumbList);\n    };\n    Thumbnail.prototype.setAnimateThumbStyles = function() {\n        if (this.settings.animateThumb) {\n            this.core.outer.addClass(\"lg-animate-thumb\");\n        }\n    };\n    // Manage thumbnail active calss\n    Thumbnail.prototype.manageActiveClassOnSlideChange = function() {\n        var _this = this;\n        // manage active class for thumbnail\n        this.core.LGel.on(lGEvents.beforeSlide + \".thumb\", function(event) {\n            var $thumb = _this.core.outer.find(\".lg-thumb-item\");\n            var index = event.detail.index;\n            $thumb.removeClass(\"active\");\n            $thumb.eq(index).addClass(\"active\");\n        });\n    };\n    // Toggle thumbnail bar\n    Thumbnail.prototype.toggleThumbBar = function() {\n        var _this = this;\n        if (this.settings.toggleThumb) {\n            this.core.outer.addClass(\"lg-can-toggle\");\n            this.core.$toolbar.append('<button type=\"button\" aria-label=\"' + this.settings.thumbnailPluginStrings[\"toggleThumbnails\"] + '\" class=\"lg-toggle-thumb lg-icon\"></button>');\n            this.core.outer.find(\".lg-toggle-thumb\").first().on(\"click.lg\", function() {\n                _this.core.outer.toggleClass(\"lg-components-open\");\n            });\n        }\n    };\n    Thumbnail.prototype.thumbKeyPress = function() {\n        var _this = this;\n        this.$LG(window).on(\"keydown.lg.thumb.global\" + this.core.lgId, function(e) {\n            if (!_this.core.lgOpened || !_this.settings.toggleThumb) return;\n            if (e.keyCode === 38) {\n                e.preventDefault();\n                _this.core.outer.addClass(\"lg-components-open\");\n            } else if (e.keyCode === 40) {\n                e.preventDefault();\n                _this.core.outer.removeClass(\"lg-components-open\");\n            }\n        });\n    };\n    Thumbnail.prototype.destroy = function() {\n        if (this.settings.thumbnail) {\n            this.$LG(window).off(\".lg.thumb.global\" + this.core.lgId);\n            this.core.LGel.off(\".lg.thumb\");\n            this.core.LGel.off(\".thumb\");\n            this.$thumbOuter.remove();\n            this.core.outer.removeClass(\"lg-has-thumb\");\n        }\n    };\n    return Thumbnail;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Thumbnail); //# sourceMappingURL=lg-thumbnail.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/plugins/thumbnail/lg-thumbnail.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js":
/*!***************************************************************!*\
  !*** ./node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*!\n * lightgallery | 2.7.2 | September 20th 2023\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */ /*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar zoomSettings = {\n    scale: 1,\n    zoom: true,\n    infiniteZoom: true,\n    actualSize: true,\n    showZoomInOutIcons: false,\n    actualSizeIcons: {\n        zoomIn: \"lg-zoom-in\",\n        zoomOut: \"lg-zoom-out\"\n    },\n    enableZoomAfter: 300,\n    zoomPluginStrings: {\n        zoomIn: \"Zoom in\",\n        zoomOut: \"Zoom out\",\n        viewActualSize: \"View actual size\"\n    }\n};\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */ var lGEvents = {\n    afterAppendSlide: \"lgAfterAppendSlide\",\n    init: \"lgInit\",\n    hasVideo: \"lgHasVideo\",\n    containerResize: \"lgContainerResize\",\n    updateSlides: \"lgUpdateSlides\",\n    afterAppendSubHtml: \"lgAfterAppendSubHtml\",\n    beforeOpen: \"lgBeforeOpen\",\n    afterOpen: \"lgAfterOpen\",\n    slideItemLoad: \"lgSlideItemLoad\",\n    beforeSlide: \"lgBeforeSlide\",\n    afterSlide: \"lgAfterSlide\",\n    posterClick: \"lgPosterClick\",\n    dragStart: \"lgDragStart\",\n    dragMove: \"lgDragMove\",\n    dragEnd: \"lgDragEnd\",\n    beforeNextSlide: \"lgBeforeNextSlide\",\n    beforePrevSlide: \"lgBeforePrevSlide\",\n    beforeClose: \"lgBeforeClose\",\n    afterClose: \"lgAfterClose\",\n    rotateLeft: \"lgRotateLeft\",\n    rotateRight: \"lgRotateRight\",\n    flipHorizontal: \"lgFlipHorizontal\",\n    flipVertical: \"lgFlipVertical\",\n    autoplay: \"lgAutoplay\",\n    autoplayStart: \"lgAutoplayStart\",\n    autoplayStop: \"lgAutoplayStop\"\n};\nvar ZOOM_TRANSITION_DURATION = 500;\nvar Zoom = /** @class */ function() {\n    function Zoom(instance, $LG) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n        this.settings = __assign(__assign({}, zoomSettings), this.core.settings);\n        return this;\n    }\n    // Append Zoom controls. Actual size, Zoom-in, Zoom-out\n    Zoom.prototype.buildTemplates = function() {\n        var zoomIcons = this.settings.showZoomInOutIcons ? '<button id=\"' + this.core.getIdName(\"lg-zoom-in\") + '\" type=\"button\" aria-label=\"' + this.settings.zoomPluginStrings[\"zoomIn\"] + '\" class=\"lg-zoom-in lg-icon\"></button><button id=\"' + this.core.getIdName(\"lg-zoom-out\") + '\" type=\"button\" aria-label=\"' + this.settings.zoomPluginStrings[\"zoomIn\"] + '\" class=\"lg-zoom-out lg-icon\"></button>' : \"\";\n        if (this.settings.actualSize) {\n            zoomIcons += '<button id=\"' + this.core.getIdName(\"lg-actual-size\") + '\" type=\"button\" aria-label=\"' + this.settings.zoomPluginStrings[\"viewActualSize\"] + '\" class=\"' + this.settings.actualSizeIcons.zoomIn + ' lg-icon\"></button>';\n        }\n        this.core.outer.addClass(\"lg-use-transition-for-zoom\");\n        this.core.$toolbar.first().append(zoomIcons);\n    };\n    /**\r\n     * @desc Enable zoom option only once the image is completely loaded\r\n     * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted\r\n     *\r\n     * Zoom styles are defined under lg-zoomable CSS class.\r\n     */ Zoom.prototype.enableZoom = function(event) {\n        var _this = this;\n        // delay will be 0 except first time\n        var _speed = this.settings.enableZoomAfter + event.detail.delay;\n        // set _speed value 0 if gallery opened from direct url and if it is first slide\n        if (this.$LG(\"body\").first().hasClass(\"lg-from-hash\") && event.detail.delay) {\n            // will execute only once\n            _speed = 0;\n        } else {\n            // Remove lg-from-hash to enable starting animation.\n            this.$LG(\"body\").first().removeClass(\"lg-from-hash\");\n        }\n        this.zoomableTimeout = setTimeout(function() {\n            if (!_this.isImageSlide(_this.core.index)) {\n                return;\n            }\n            _this.core.getSlideItem(event.detail.index).addClass(\"lg-zoomable\");\n            if (event.detail.index === _this.core.index) {\n                _this.setZoomEssentials();\n            }\n        }, _speed + 30);\n    };\n    Zoom.prototype.enableZoomOnSlideItemLoad = function() {\n        // Add zoomable class\n        this.core.LGel.on(lGEvents.slideItemLoad + \".zoom\", this.enableZoom.bind(this));\n    };\n    Zoom.prototype.getDragCords = function(e) {\n        return {\n            x: e.pageX,\n            y: e.pageY\n        };\n    };\n    Zoom.prototype.getSwipeCords = function(e) {\n        var x = e.touches[0].pageX;\n        var y = e.touches[0].pageY;\n        return {\n            x: x,\n            y: y\n        };\n    };\n    Zoom.prototype.getDragAllowedAxises = function(scale, scaleDiff) {\n        var $image = this.core.getSlideItem(this.core.index).find(\".lg-image\").first().get();\n        var height = 0;\n        var width = 0;\n        var rect = $image.getBoundingClientRect();\n        if (scale) {\n            height = $image.offsetHeight * scale;\n            width = $image.offsetWidth * scale;\n        } else if (scaleDiff) {\n            height = rect.height + scaleDiff * rect.height;\n            width = rect.width + scaleDiff * rect.width;\n        } else {\n            height = rect.height;\n            width = rect.width;\n        }\n        var allowY = height > this.containerRect.height;\n        var allowX = width > this.containerRect.width;\n        return {\n            allowX: allowX,\n            allowY: allowY\n        };\n    };\n    Zoom.prototype.setZoomEssentials = function() {\n        this.containerRect = this.core.$content.get().getBoundingClientRect();\n    };\n    /**\r\n     * @desc Image zoom\r\n     * Translate the wrap and scale the image to get better user experience\r\n     *\r\n     * @param {String} scale - Zoom decrement/increment value\r\n     */ Zoom.prototype.zoomImage = function(scale, scaleDiff, reposition, resetToMax) {\n        if (Math.abs(scaleDiff) <= 0) return;\n        var offsetX = this.containerRect.width / 2 + this.containerRect.left;\n        var offsetY = this.containerRect.height / 2 + this.containerRect.top + this.scrollTop;\n        var originalX;\n        var originalY;\n        if (scale === 1) {\n            this.positionChanged = false;\n        }\n        var dragAllowedAxises = this.getDragAllowedAxises(0, scaleDiff);\n        var allowY = dragAllowedAxises.allowY, allowX = dragAllowedAxises.allowX;\n        if (this.positionChanged) {\n            originalX = this.left / (this.scale - scaleDiff);\n            originalY = this.top / (this.scale - scaleDiff);\n            this.pageX = offsetX - originalX;\n            this.pageY = offsetY - originalY;\n            this.positionChanged = false;\n        }\n        var possibleSwipeCords = this.getPossibleSwipeDragCords(scaleDiff);\n        var x;\n        var y;\n        var _x = offsetX - this.pageX;\n        var _y = offsetY - this.pageY;\n        if (scale - scaleDiff > 1) {\n            var scaleVal = (scale - scaleDiff) / Math.abs(scaleDiff);\n            _x = (scaleDiff < 0 ? -_x : _x) + this.left * (scaleVal + (scaleDiff < 0 ? -1 : 1));\n            _y = (scaleDiff < 0 ? -_y : _y) + this.top * (scaleVal + (scaleDiff < 0 ? -1 : 1));\n            x = _x / scaleVal;\n            y = _y / scaleVal;\n        } else {\n            var scaleVal = (scale - scaleDiff) * scaleDiff;\n            x = _x * scaleVal;\n            y = _y * scaleVal;\n        }\n        if (reposition) {\n            if (allowX) {\n                if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {\n                    x = possibleSwipeCords.minX;\n                } else if (this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)) {\n                    x = possibleSwipeCords.maxX;\n                }\n            } else {\n                if (scale > 1) {\n                    if (x < possibleSwipeCords.minX) {\n                        x = possibleSwipeCords.minX;\n                    } else if (x > possibleSwipeCords.maxX) {\n                        x = possibleSwipeCords.maxX;\n                    }\n                }\n            }\n            // @todo fix this\n            if (allowY) {\n                if (this.isBeyondPossibleTop(y, possibleSwipeCords.minY)) {\n                    y = possibleSwipeCords.minY;\n                } else if (this.isBeyondPossibleBottom(y, possibleSwipeCords.maxY)) {\n                    y = possibleSwipeCords.maxY;\n                }\n            } else {\n                // If the translate value based on index of beyond the viewport, utilize the available space to prevent image being cut out\n                if (scale > 1) {\n                    //If image goes beyond viewport top, use the minim possible translate value\n                    if (y < possibleSwipeCords.minY) {\n                        y = possibleSwipeCords.minY;\n                    } else if (y > possibleSwipeCords.maxY) {\n                        y = possibleSwipeCords.maxY;\n                    }\n                }\n            }\n        }\n        this.setZoomStyles({\n            x: x,\n            y: y,\n            scale: scale\n        });\n        this.left = x;\n        this.top = y;\n        if (resetToMax) {\n            this.setZoomImageSize();\n        }\n    };\n    Zoom.prototype.resetImageTranslate = function(index) {\n        if (!this.isImageSlide(index)) {\n            return;\n        }\n        var $image = this.core.getSlideItem(index).find(\".lg-image\").first();\n        this.imageReset = false;\n        $image.removeClass(\"reset-transition reset-transition-y reset-transition-x\");\n        this.core.outer.removeClass(\"lg-actual-size\");\n        $image.css(\"width\", \"auto\").css(\"height\", \"auto\");\n        setTimeout(function() {\n            $image.removeClass(\"no-transition\");\n        }, 10);\n    };\n    Zoom.prototype.setZoomImageSize = function() {\n        var _this = this;\n        var $image = this.core.getSlideItem(this.core.index).find(\".lg-image\").first();\n        setTimeout(function() {\n            var actualSizeScale = _this.getCurrentImageActualSizeScale();\n            if (_this.scale >= actualSizeScale) {\n                $image.addClass(\"no-transition\");\n                _this.imageReset = true;\n            }\n        }, ZOOM_TRANSITION_DURATION);\n        setTimeout(function() {\n            var actualSizeScale = _this.getCurrentImageActualSizeScale();\n            if (_this.scale >= actualSizeScale) {\n                var dragAllowedAxises = _this.getDragAllowedAxises(_this.scale);\n                $image.css(\"width\", $image.get().naturalWidth + \"px\").css(\"height\", $image.get().naturalHeight + \"px\");\n                _this.core.outer.addClass(\"lg-actual-size\");\n                if (dragAllowedAxises.allowX && dragAllowedAxises.allowY) {\n                    $image.addClass(\"reset-transition\");\n                } else if (dragAllowedAxises.allowX && !dragAllowedAxises.allowY) {\n                    $image.addClass(\"reset-transition-x\");\n                } else if (!dragAllowedAxises.allowX && dragAllowedAxises.allowY) {\n                    $image.addClass(\"reset-transition-y\");\n                }\n            }\n        }, ZOOM_TRANSITION_DURATION + 50);\n    };\n    /**\r\n     * @desc apply scale3d to image and translate to image wrap\r\n     * @param {style} X,Y and scale\r\n     */ Zoom.prototype.setZoomStyles = function(style) {\n        var $imageWrap = this.core.getSlideItem(this.core.index).find(\".lg-img-wrap\").first();\n        var $image = this.core.getSlideItem(this.core.index).find(\".lg-image\").first();\n        var $dummyImage = this.core.outer.find(\".lg-current .lg-dummy-img\").first();\n        this.scale = style.scale;\n        $image.css(\"transform\", \"scale3d(\" + style.scale + \", \" + style.scale + \", 1)\");\n        $dummyImage.css(\"transform\", \"scale3d(\" + style.scale + \", \" + style.scale + \", 1)\");\n        var transform = \"translate3d(\" + style.x + \"px, \" + style.y + \"px, 0)\";\n        $imageWrap.css(\"transform\", transform);\n    };\n    /**\r\n     * @param index - Index of the current slide\r\n     * @param event - event will be available only if the function is called on clicking/taping the imags\r\n     */ Zoom.prototype.setActualSize = function(index, event) {\n        var _this = this;\n        if (this.zoomInProgress) {\n            return;\n        }\n        this.zoomInProgress = true;\n        var currentItem = this.core.galleryItems[this.core.index];\n        this.resetImageTranslate(index);\n        setTimeout(function() {\n            // Allow zoom only on image\n            if (!currentItem.src || _this.core.outer.hasClass(\"lg-first-slide-loading\")) {\n                return;\n            }\n            var scale = _this.getCurrentImageActualSizeScale();\n            var prevScale = _this.scale;\n            if (_this.core.outer.hasClass(\"lg-zoomed\")) {\n                _this.scale = 1;\n            } else {\n                _this.scale = _this.getScale(scale);\n            }\n            _this.setPageCords(event);\n            _this.beginZoom(_this.scale);\n            _this.zoomImage(_this.scale, _this.scale - prevScale, true, true);\n        }, 50);\n        setTimeout(function() {\n            _this.core.outer.removeClass(\"lg-grabbing\").addClass(\"lg-grab\");\n        }, 60);\n        setTimeout(function() {\n            _this.zoomInProgress = false;\n        }, ZOOM_TRANSITION_DURATION + 110);\n    };\n    Zoom.prototype.getNaturalWidth = function(index) {\n        var $image = this.core.getSlideItem(index).find(\".lg-image\").first();\n        var naturalWidth = this.core.galleryItems[index].width;\n        return naturalWidth ? parseFloat(naturalWidth) : $image.get().naturalWidth;\n    };\n    Zoom.prototype.getActualSizeScale = function(naturalWidth, width) {\n        var _scale;\n        var scale;\n        if (naturalWidth >= width) {\n            _scale = naturalWidth / width;\n            scale = _scale || 2;\n        } else {\n            scale = 1;\n        }\n        return scale;\n    };\n    Zoom.prototype.getCurrentImageActualSizeScale = function() {\n        var $image = this.core.getSlideItem(this.core.index).find(\".lg-image\").first();\n        var width = $image.get().offsetWidth;\n        var naturalWidth = this.getNaturalWidth(this.core.index) || width;\n        return this.getActualSizeScale(naturalWidth, width);\n    };\n    Zoom.prototype.getPageCords = function(event) {\n        var cords = {};\n        if (event) {\n            cords.x = event.pageX || event.touches[0].pageX;\n            cords.y = event.pageY || event.touches[0].pageY;\n        } else {\n            var containerRect = this.core.$content.get().getBoundingClientRect();\n            cords.x = containerRect.width / 2 + containerRect.left;\n            cords.y = containerRect.height / 2 + this.scrollTop + containerRect.top;\n        }\n        return cords;\n    };\n    Zoom.prototype.setPageCords = function(event) {\n        var pageCords = this.getPageCords(event);\n        this.pageX = pageCords.x;\n        this.pageY = pageCords.y;\n    };\n    Zoom.prototype.manageActualPixelClassNames = function() {\n        var $actualSize = this.core.getElementById(\"lg-actual-size\");\n        $actualSize.removeClass(this.settings.actualSizeIcons.zoomIn).addClass(this.settings.actualSizeIcons.zoomOut);\n    };\n    // If true, zoomed - in else zoomed out\n    Zoom.prototype.beginZoom = function(scale) {\n        this.core.outer.removeClass(\"lg-zoom-drag-transition lg-zoom-dragging\");\n        if (scale > 1) {\n            this.core.outer.addClass(\"lg-zoomed\");\n            this.manageActualPixelClassNames();\n        } else {\n            this.resetZoom();\n        }\n        return scale > 1;\n    };\n    Zoom.prototype.getScale = function(scale) {\n        var actualSizeScale = this.getCurrentImageActualSizeScale();\n        if (scale < 1) {\n            scale = 1;\n        } else if (scale > actualSizeScale) {\n            scale = actualSizeScale;\n        }\n        return scale;\n    };\n    Zoom.prototype.init = function() {\n        var _this = this;\n        if (!this.settings.zoom) {\n            return;\n        }\n        this.buildTemplates();\n        this.enableZoomOnSlideItemLoad();\n        var tapped = null;\n        this.core.outer.on(\"dblclick.lg\", function(event) {\n            if (!_this.$LG(event.target).hasClass(\"lg-image\")) {\n                return;\n            }\n            _this.setActualSize(_this.core.index, event);\n        });\n        this.core.outer.on(\"touchstart.lg\", function(event) {\n            var $target = _this.$LG(event.target);\n            if (event.touches.length === 1 && $target.hasClass(\"lg-image\")) {\n                if (!tapped) {\n                    tapped = setTimeout(function() {\n                        tapped = null;\n                    }, 300);\n                } else {\n                    clearTimeout(tapped);\n                    tapped = null;\n                    event.preventDefault();\n                    _this.setActualSize(_this.core.index, event);\n                }\n            }\n        });\n        this.core.LGel.on(lGEvents.containerResize + \".zoom \" + lGEvents.rotateRight + \".zoom \" + lGEvents.rotateLeft + \".zoom \" + lGEvents.flipHorizontal + \".zoom \" + lGEvents.flipVertical + \".zoom\", function() {\n            if (!_this.core.lgOpened || !_this.isImageSlide(_this.core.index) || _this.core.touchAction) {\n                return;\n            }\n            var _LGel = _this.core.getSlideItem(_this.core.index).find(\".lg-img-wrap\").first();\n            _this.top = 0;\n            _this.left = 0;\n            _this.setZoomEssentials();\n            _this.setZoomSwipeStyles(_LGel, {\n                x: 0,\n                y: 0\n            });\n            _this.positionChanged = true;\n        });\n        // Update zoom on resize and orientationchange\n        this.$LG(window).on(\"scroll.lg.zoom.global\" + this.core.lgId, function() {\n            if (!_this.core.lgOpened) return;\n            _this.scrollTop = _this.$LG(window).scrollTop();\n        });\n        this.core.getElementById(\"lg-zoom-out\").on(\"click.lg\", function() {\n            // Allow zoom only on image\n            if (!_this.isImageSlide(_this.core.index)) {\n                return;\n            }\n            var timeout = 0;\n            if (_this.imageReset) {\n                _this.resetImageTranslate(_this.core.index);\n                timeout = 50;\n            }\n            setTimeout(function() {\n                var scale = _this.scale - _this.settings.scale;\n                if (scale < 1) {\n                    scale = 1;\n                }\n                _this.beginZoom(scale);\n                _this.zoomImage(scale, -_this.settings.scale, true, !_this.settings.infiniteZoom);\n            }, timeout);\n        });\n        this.core.getElementById(\"lg-zoom-in\").on(\"click.lg\", function() {\n            _this.zoomIn();\n        });\n        this.core.getElementById(\"lg-actual-size\").on(\"click.lg\", function() {\n            _this.setActualSize(_this.core.index);\n        });\n        this.core.LGel.on(lGEvents.beforeOpen + \".zoom\", function() {\n            _this.core.outer.find(\".lg-item\").removeClass(\"lg-zoomable\");\n        });\n        this.core.LGel.on(lGEvents.afterOpen + \".zoom\", function() {\n            _this.scrollTop = _this.$LG(window).scrollTop();\n            // Set the initial value center\n            _this.pageX = _this.core.outer.width() / 2;\n            _this.pageY = _this.core.outer.height() / 2 + _this.scrollTop;\n            _this.scale = 1;\n        });\n        // Reset zoom on slide change\n        this.core.LGel.on(lGEvents.afterSlide + \".zoom\", function(event) {\n            var prevIndex = event.detail.prevIndex;\n            _this.scale = 1;\n            _this.positionChanged = false;\n            _this.zoomInProgress = false;\n            _this.resetZoom(prevIndex);\n            _this.resetImageTranslate(prevIndex);\n            if (_this.isImageSlide(_this.core.index)) {\n                _this.setZoomEssentials();\n            }\n        });\n        // Drag option after zoom\n        this.zoomDrag();\n        this.pinchZoom();\n        this.zoomSwipe();\n        // Store the zoomable timeout value just to clear it while closing\n        this.zoomableTimeout = false;\n        this.positionChanged = false;\n        this.zoomInProgress = false;\n    };\n    Zoom.prototype.zoomIn = function() {\n        // Allow zoom only on image\n        if (!this.isImageSlide(this.core.index)) {\n            return;\n        }\n        var scale = this.scale + this.settings.scale;\n        if (!this.settings.infiniteZoom) {\n            scale = this.getScale(scale);\n        }\n        this.beginZoom(scale);\n        this.zoomImage(scale, Math.min(this.settings.scale, scale - this.scale), true, !this.settings.infiniteZoom);\n    };\n    // Reset zoom effect\n    Zoom.prototype.resetZoom = function(index) {\n        this.core.outer.removeClass(\"lg-zoomed lg-zoom-drag-transition\");\n        var $actualSize = this.core.getElementById(\"lg-actual-size\");\n        var $item = this.core.getSlideItem(index !== undefined ? index : this.core.index);\n        $actualSize.removeClass(this.settings.actualSizeIcons.zoomOut).addClass(this.settings.actualSizeIcons.zoomIn);\n        $item.find(\".lg-img-wrap\").first().removeAttr(\"style\");\n        $item.find(\".lg-image\").first().removeAttr(\"style\");\n        this.scale = 1;\n        this.left = 0;\n        this.top = 0;\n        // Reset pagx pagy values to center\n        this.setPageCords();\n    };\n    Zoom.prototype.getTouchDistance = function(e) {\n        return Math.sqrt((e.touches[0].pageX - e.touches[1].pageX) * (e.touches[0].pageX - e.touches[1].pageX) + (e.touches[0].pageY - e.touches[1].pageY) * (e.touches[0].pageY - e.touches[1].pageY));\n    };\n    Zoom.prototype.pinchZoom = function() {\n        var _this = this;\n        var startDist = 0;\n        var pinchStarted = false;\n        var initScale = 1;\n        var prevScale = 0;\n        var $item = this.core.getSlideItem(this.core.index);\n        this.core.outer.on(\"touchstart.lg\", function(e) {\n            $item = _this.core.getSlideItem(_this.core.index);\n            if (!_this.isImageSlide(_this.core.index)) {\n                return;\n            }\n            if (e.touches.length === 2) {\n                e.preventDefault();\n                if (_this.core.outer.hasClass(\"lg-first-slide-loading\")) {\n                    return;\n                }\n                initScale = _this.scale || 1;\n                _this.core.outer.removeClass(\"lg-zoom-drag-transition lg-zoom-dragging\");\n                _this.setPageCords(e);\n                _this.resetImageTranslate(_this.core.index);\n                _this.core.touchAction = \"pinch\";\n                startDist = _this.getTouchDistance(e);\n            }\n        });\n        this.core.$inner.on(\"touchmove.lg\", function(e) {\n            if (e.touches.length === 2 && _this.core.touchAction === \"pinch\" && (_this.$LG(e.target).hasClass(\"lg-item\") || $item.get().contains(e.target))) {\n                e.preventDefault();\n                var endDist = _this.getTouchDistance(e);\n                var distance = startDist - endDist;\n                if (!pinchStarted && Math.abs(distance) > 5) {\n                    pinchStarted = true;\n                }\n                if (pinchStarted) {\n                    prevScale = _this.scale;\n                    var _scale = Math.max(1, initScale + -distance * 0.02);\n                    _this.scale = Math.round((_scale + Number.EPSILON) * 100) / 100;\n                    var diff = _this.scale - prevScale;\n                    _this.zoomImage(_this.scale, Math.round((diff + Number.EPSILON) * 100) / 100, false, false);\n                }\n            }\n        });\n        this.core.$inner.on(\"touchend.lg\", function(e) {\n            if (_this.core.touchAction === \"pinch\" && (_this.$LG(e.target).hasClass(\"lg-item\") || $item.get().contains(e.target))) {\n                pinchStarted = false;\n                startDist = 0;\n                if (_this.scale <= 1) {\n                    _this.resetZoom();\n                } else {\n                    var actualSizeScale = _this.getCurrentImageActualSizeScale();\n                    if (_this.scale >= actualSizeScale) {\n                        var scaleDiff = actualSizeScale - _this.scale;\n                        if (scaleDiff === 0) {\n                            scaleDiff = 0.01;\n                        }\n                        _this.zoomImage(actualSizeScale, scaleDiff, false, true);\n                    }\n                    _this.manageActualPixelClassNames();\n                    _this.core.outer.addClass(\"lg-zoomed\");\n                }\n                _this.core.touchAction = undefined;\n            }\n        });\n    };\n    Zoom.prototype.touchendZoom = function(startCoords, endCoords, allowX, allowY, touchDuration) {\n        var distanceXnew = endCoords.x - startCoords.x;\n        var distanceYnew = endCoords.y - startCoords.y;\n        var speedX = Math.abs(distanceXnew) / touchDuration + 1;\n        var speedY = Math.abs(distanceYnew) / touchDuration + 1;\n        if (speedX > 2) {\n            speedX += 1;\n        }\n        if (speedY > 2) {\n            speedY += 1;\n        }\n        distanceXnew = distanceXnew * speedX;\n        distanceYnew = distanceYnew * speedY;\n        var _LGel = this.core.getSlideItem(this.core.index).find(\".lg-img-wrap\").first();\n        var distance = {};\n        distance.x = this.left + distanceXnew;\n        distance.y = this.top + distanceYnew;\n        var possibleSwipeCords = this.getPossibleSwipeDragCords();\n        if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {\n            if (allowY) {\n                if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\n                    distance.y = possibleSwipeCords.minY;\n                } else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {\n                    distance.y = possibleSwipeCords.maxY;\n                }\n            }\n            if (allowX) {\n                if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {\n                    distance.x = possibleSwipeCords.minX;\n                } else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {\n                    distance.x = possibleSwipeCords.maxX;\n                }\n            }\n            if (allowY) {\n                this.top = distance.y;\n            } else {\n                distance.y = this.top;\n            }\n            if (allowX) {\n                this.left = distance.x;\n            } else {\n                distance.x = this.left;\n            }\n            this.setZoomSwipeStyles(_LGel, distance);\n            this.positionChanged = true;\n        }\n    };\n    Zoom.prototype.getZoomSwipeCords = function(startCoords, endCoords, allowX, allowY, possibleSwipeCords) {\n        var distance = {};\n        if (allowY) {\n            distance.y = this.top + (endCoords.y - startCoords.y);\n            if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\n                var diffMinY = possibleSwipeCords.minY - distance.y;\n                distance.y = possibleSwipeCords.minY - diffMinY / 6;\n            } else if (this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)) {\n                var diffMaxY = distance.y - possibleSwipeCords.maxY;\n                distance.y = possibleSwipeCords.maxY + diffMaxY / 6;\n            }\n        } else {\n            distance.y = this.top;\n        }\n        if (allowX) {\n            distance.x = this.left + (endCoords.x - startCoords.x);\n            if (this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)) {\n                var diffMinX = possibleSwipeCords.minX - distance.x;\n                distance.x = possibleSwipeCords.minX - diffMinX / 6;\n            } else if (this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)) {\n                var difMaxX = distance.x - possibleSwipeCords.maxX;\n                distance.x = possibleSwipeCords.maxX + difMaxX / 6;\n            }\n        } else {\n            distance.x = this.left;\n        }\n        return distance;\n    };\n    Zoom.prototype.isBeyondPossibleLeft = function(x, minX) {\n        return x >= minX;\n    };\n    Zoom.prototype.isBeyondPossibleRight = function(x, maxX) {\n        return x <= maxX;\n    };\n    Zoom.prototype.isBeyondPossibleTop = function(y, minY) {\n        return y >= minY;\n    };\n    Zoom.prototype.isBeyondPossibleBottom = function(y, maxY) {\n        return y <= maxY;\n    };\n    Zoom.prototype.isImageSlide = function(index) {\n        var currentItem = this.core.galleryItems[index];\n        return this.core.getSlideType(currentItem) === \"image\";\n    };\n    Zoom.prototype.getPossibleSwipeDragCords = function(scale) {\n        var $image = this.core.getSlideItem(this.core.index).find(\".lg-image\").first();\n        var bottom = this.core.mediaContainerPosition.bottom;\n        var imgRect = $image.get().getBoundingClientRect();\n        var imageHeight = imgRect.height;\n        var imageWidth = imgRect.width;\n        if (scale) {\n            imageHeight = imageHeight + scale * imageHeight;\n            imageWidth = imageWidth + scale * imageWidth;\n        }\n        var minY = (imageHeight - this.containerRect.height) / 2;\n        var maxY = (this.containerRect.height - imageHeight) / 2 + bottom;\n        var minX = (imageWidth - this.containerRect.width) / 2;\n        var maxX = (this.containerRect.width - imageWidth) / 2;\n        var possibleSwipeCords = {\n            minY: minY,\n            maxY: maxY,\n            minX: minX,\n            maxX: maxX\n        };\n        return possibleSwipeCords;\n    };\n    Zoom.prototype.setZoomSwipeStyles = function(LGel, distance) {\n        LGel.css(\"transform\", \"translate3d(\" + distance.x + \"px, \" + distance.y + \"px, 0)\");\n    };\n    Zoom.prototype.zoomSwipe = function() {\n        var _this = this;\n        var startCoords = {};\n        var endCoords = {};\n        var isMoved = false;\n        // Allow x direction drag\n        var allowX = false;\n        // Allow Y direction drag\n        var allowY = false;\n        var startTime = new Date();\n        var endTime = new Date();\n        var possibleSwipeCords;\n        var _LGel;\n        var $item = this.core.getSlideItem(this.core.index);\n        this.core.$inner.on(\"touchstart.lg\", function(e) {\n            // Allow zoom only on image\n            if (!_this.isImageSlide(_this.core.index)) {\n                return;\n            }\n            $item = _this.core.getSlideItem(_this.core.index);\n            if ((_this.$LG(e.target).hasClass(\"lg-item\") || $item.get().contains(e.target)) && e.touches.length === 1 && _this.core.outer.hasClass(\"lg-zoomed\")) {\n                e.preventDefault();\n                startTime = new Date();\n                _this.core.touchAction = \"zoomSwipe\";\n                _LGel = _this.core.getSlideItem(_this.core.index).find(\".lg-img-wrap\").first();\n                var dragAllowedAxises = _this.getDragAllowedAxises(0);\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n                if (allowX || allowY) {\n                    startCoords = _this.getSwipeCords(e);\n                }\n                possibleSwipeCords = _this.getPossibleSwipeDragCords();\n                // reset opacity and transition duration\n                _this.core.outer.addClass(\"lg-zoom-dragging lg-zoom-drag-transition\");\n            }\n        });\n        this.core.$inner.on(\"touchmove.lg\", function(e) {\n            if (e.touches.length === 1 && _this.core.touchAction === \"zoomSwipe\" && (_this.$LG(e.target).hasClass(\"lg-item\") || $item.get().contains(e.target))) {\n                e.preventDefault();\n                _this.core.touchAction = \"zoomSwipe\";\n                endCoords = _this.getSwipeCords(e);\n                var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);\n                if (Math.abs(endCoords.x - startCoords.x) > 15 || Math.abs(endCoords.y - startCoords.y) > 15) {\n                    isMoved = true;\n                    _this.setZoomSwipeStyles(_LGel, distance);\n                }\n            }\n        });\n        this.core.$inner.on(\"touchend.lg\", function(e) {\n            if (_this.core.touchAction === \"zoomSwipe\" && (_this.$LG(e.target).hasClass(\"lg-item\") || $item.get().contains(e.target))) {\n                e.preventDefault();\n                _this.core.touchAction = undefined;\n                _this.core.outer.removeClass(\"lg-zoom-dragging\");\n                if (!isMoved) {\n                    return;\n                }\n                isMoved = false;\n                endTime = new Date();\n                var touchDuration = endTime.valueOf() - startTime.valueOf();\n                _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration);\n            }\n        });\n    };\n    Zoom.prototype.zoomDrag = function() {\n        var _this = this;\n        var startCoords = {};\n        var endCoords = {};\n        var isDragging = false;\n        var isMoved = false;\n        // Allow x direction drag\n        var allowX = false;\n        // Allow Y direction drag\n        var allowY = false;\n        var startTime;\n        var endTime;\n        var possibleSwipeCords;\n        var _LGel;\n        this.core.outer.on(\"mousedown.lg.zoom\", function(e) {\n            // Allow zoom only on image\n            if (!_this.isImageSlide(_this.core.index)) {\n                return;\n            }\n            var $item = _this.core.getSlideItem(_this.core.index);\n            if (_this.$LG(e.target).hasClass(\"lg-item\") || $item.get().contains(e.target)) {\n                startTime = new Date();\n                _LGel = _this.core.getSlideItem(_this.core.index).find(\".lg-img-wrap\").first();\n                var dragAllowedAxises = _this.getDragAllowedAxises(0);\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n                if (_this.core.outer.hasClass(\"lg-zoomed\")) {\n                    if (_this.$LG(e.target).hasClass(\"lg-object\") && (allowX || allowY)) {\n                        e.preventDefault();\n                        startCoords = _this.getDragCords(e);\n                        possibleSwipeCords = _this.getPossibleSwipeDragCords();\n                        isDragging = true;\n                        _this.core.outer.removeClass(\"lg-grab\").addClass(\"lg-grabbing lg-zoom-drag-transition lg-zoom-dragging\");\n                    // reset opacity and transition duration\n                    }\n                }\n            }\n        });\n        this.$LG(window).on(\"mousemove.lg.zoom.global\" + this.core.lgId, function(e) {\n            if (isDragging) {\n                isMoved = true;\n                endCoords = _this.getDragCords(e);\n                var distance = _this.getZoomSwipeCords(startCoords, endCoords, allowX, allowY, possibleSwipeCords);\n                _this.setZoomSwipeStyles(_LGel, distance);\n            }\n        });\n        this.$LG(window).on(\"mouseup.lg.zoom.global\" + this.core.lgId, function(e) {\n            if (isDragging) {\n                endTime = new Date();\n                isDragging = false;\n                _this.core.outer.removeClass(\"lg-zoom-dragging\");\n                // Fix for chrome mouse move on click\n                if (isMoved && (startCoords.x !== endCoords.x || startCoords.y !== endCoords.y)) {\n                    endCoords = _this.getDragCords(e);\n                    var touchDuration = endTime.valueOf() - startTime.valueOf();\n                    _this.touchendZoom(startCoords, endCoords, allowX, allowY, touchDuration);\n                }\n                isMoved = false;\n            }\n            _this.core.outer.removeClass(\"lg-grabbing\").addClass(\"lg-grab\");\n        });\n    };\n    Zoom.prototype.closeGallery = function() {\n        this.resetZoom();\n        this.zoomInProgress = false;\n    };\n    Zoom.prototype.destroy = function() {\n        // Unbind all events added by lightGallery zoom plugin\n        this.$LG(window).off(\".lg.zoom.global\" + this.core.lgId);\n        this.core.LGel.off(\".lg.zoom\");\n        this.core.LGel.off(\".zoom\");\n        clearTimeout(this.zoomableTimeout);\n        this.zoomableTimeout = false;\n    };\n    return Zoom;\n}();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Zoom); //# sourceMappingURL=lg-zoom.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/plugins/zoom/lg-zoom.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/react/Lightgallery.es5.js":
/*!*************************************************************!*\
  !*** ./node_modules/lightgallery/react/Lightgallery.es5.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ function __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\n/*!\n * lightgallery | 2.7.2 | September 20th 2023\n * http://www.lightgalleryjs.com/\n * Copyright (c) 2020 Sachin Neravath;\n * @license GPLv3\n */ /*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ var __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __spreadArrays() {\n    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;\n    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];\n    return r;\n}\n/**\r\n * List of lightGallery events\r\n * All events should be documented here\r\n * Below interfaces are used to build the website documentations\r\n * */ var lGEvents = {\n    afterAppendSlide: \"lgAfterAppendSlide\",\n    init: \"lgInit\",\n    hasVideo: \"lgHasVideo\",\n    containerResize: \"lgContainerResize\",\n    updateSlides: \"lgUpdateSlides\",\n    afterAppendSubHtml: \"lgAfterAppendSubHtml\",\n    beforeOpen: \"lgBeforeOpen\",\n    afterOpen: \"lgAfterOpen\",\n    slideItemLoad: \"lgSlideItemLoad\",\n    beforeSlide: \"lgBeforeSlide\",\n    afterSlide: \"lgAfterSlide\",\n    posterClick: \"lgPosterClick\",\n    dragStart: \"lgDragStart\",\n    dragMove: \"lgDragMove\",\n    dragEnd: \"lgDragEnd\",\n    beforeNextSlide: \"lgBeforeNextSlide\",\n    beforePrevSlide: \"lgBeforePrevSlide\",\n    beforeClose: \"lgBeforeClose\",\n    afterClose: \"lgAfterClose\",\n    rotateLeft: \"lgRotateLeft\",\n    rotateRight: \"lgRotateRight\",\n    flipHorizontal: \"lgFlipHorizontal\",\n    flipVertical: \"lgFlipVertical\",\n    autoplay: \"lgAutoplay\",\n    autoplayStart: \"lgAutoplayStart\",\n    autoplayStop: \"lgAutoplayStop\"\n};\nvar lightGalleryCoreSettings = {\n    mode: \"lg-slide\",\n    easing: \"ease\",\n    speed: 400,\n    licenseKey: \"0000-0000-000-0000\",\n    height: \"100%\",\n    width: \"100%\",\n    addClass: \"\",\n    startClass: \"lg-start-zoom\",\n    backdropDuration: 300,\n    container: \"\",\n    startAnimationDuration: 400,\n    zoomFromOrigin: true,\n    hideBarsDelay: 0,\n    showBarsAfter: 10000,\n    slideDelay: 0,\n    supportLegacyBrowser: true,\n    allowMediaOverlap: false,\n    videoMaxSize: \"1280-720\",\n    loadYouTubePoster: true,\n    defaultCaptionHeight: 0,\n    ariaLabelledby: \"\",\n    ariaDescribedby: \"\",\n    resetScrollPosition: true,\n    hideScrollbar: false,\n    closable: true,\n    swipeToClose: true,\n    closeOnTap: true,\n    showCloseIcon: true,\n    showMaximizeIcon: false,\n    loop: true,\n    escKey: true,\n    keyPress: true,\n    trapFocus: true,\n    controls: true,\n    slideEndAnimation: true,\n    hideControlOnEnd: false,\n    mousewheel: false,\n    getCaptionFromTitleOrAlt: true,\n    appendSubHtmlTo: \".lg-sub-html\",\n    subHtmlSelectorRelative: false,\n    preload: 2,\n    numberOfSlideItemsInDom: 10,\n    selector: \"\",\n    selectWithin: \"\",\n    nextHtml: \"\",\n    prevHtml: \"\",\n    index: 0,\n    iframeWidth: \"100%\",\n    iframeHeight: \"100%\",\n    iframeMaxWidth: \"100%\",\n    iframeMaxHeight: \"100%\",\n    download: true,\n    counter: true,\n    appendCounterTo: \".lg-toolbar\",\n    swipeThreshold: 50,\n    enableSwipe: true,\n    enableDrag: true,\n    dynamic: false,\n    dynamicEl: [],\n    extraProps: [],\n    exThumbImage: \"\",\n    isMobile: undefined,\n    mobileSettings: {\n        controls: false,\n        showCloseIcon: false,\n        download: false\n    },\n    plugins: [],\n    strings: {\n        closeGallery: \"Close gallery\",\n        toggleMaximize: \"Toggle maximize\",\n        previousSlide: \"Previous slide\",\n        nextSlide: \"Next slide\",\n        download: \"Download\",\n        playVideo: \"Play video\",\n        mediaLoadingFailed: \"Oops... Failed to load content...\"\n    }\n};\nfunction initLgPolyfills() {\n    (function() {\n        if (typeof window.CustomEvent === \"function\") return false;\n        function CustomEvent1(event, params) {\n            params = params || {\n                bubbles: false,\n                cancelable: false,\n                detail: null\n            };\n            var evt = document.createEvent(\"CustomEvent\");\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n            return evt;\n        }\n        window.CustomEvent = CustomEvent1;\n    })();\n    (function() {\n        if (!Element.prototype.matches) {\n            Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n        }\n    })();\n}\nvar lgQuery = /** @class */ function() {\n    function lgQuery(selector) {\n        this.cssVenderPrefixes = [\n            \"TransitionDuration\",\n            \"TransitionTimingFunction\",\n            \"Transform\",\n            \"Transition\"\n        ];\n        this.selector = this._getSelector(selector);\n        this.firstElement = this._getFirstEl();\n        return this;\n    }\n    lgQuery.generateUUID = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n    };\n    lgQuery.prototype._getSelector = function(selector, context) {\n        if (context === void 0) {\n            context = document;\n        }\n        if (typeof selector !== \"string\") {\n            return selector;\n        }\n        context = context || document;\n        var fl = selector.substring(0, 1);\n        if (fl === \"#\") {\n            return context.querySelector(selector);\n        } else {\n            return context.querySelectorAll(selector);\n        }\n    };\n    lgQuery.prototype._each = function(func) {\n        if (!this.selector) {\n            return this;\n        }\n        if (this.selector.length !== undefined) {\n            [].forEach.call(this.selector, func);\n        } else {\n            func(this.selector, 0);\n        }\n        return this;\n    };\n    lgQuery.prototype._setCssVendorPrefix = function(el, cssProperty, value) {\n        // prettier-ignore\n        var property = cssProperty.replace(/-([a-z])/gi, function(s, group1) {\n            return group1.toUpperCase();\n        });\n        if (this.cssVenderPrefixes.indexOf(property) !== -1) {\n            el.style[property.charAt(0).toLowerCase() + property.slice(1)] = value;\n            el.style[\"webkit\" + property] = value;\n            el.style[\"moz\" + property] = value;\n            el.style[\"ms\" + property] = value;\n            el.style[\"o\" + property] = value;\n        } else {\n            el.style[property] = value;\n        }\n    };\n    lgQuery.prototype._getFirstEl = function() {\n        if (this.selector && this.selector.length !== undefined) {\n            return this.selector[0];\n        } else {\n            return this.selector;\n        }\n    };\n    lgQuery.prototype.isEventMatched = function(event, eventName) {\n        var eventNamespace = eventName.split(\".\");\n        return event.split(\".\").filter(function(e) {\n            return e;\n        }).every(function(e) {\n            return eventNamespace.indexOf(e) !== -1;\n        });\n    };\n    lgQuery.prototype.attr = function(attr, value) {\n        if (value === undefined) {\n            if (!this.firstElement) {\n                return \"\";\n            }\n            return this.firstElement.getAttribute(attr);\n        }\n        this._each(function(el) {\n            el.setAttribute(attr, value);\n        });\n        return this;\n    };\n    lgQuery.prototype.find = function(selector) {\n        return $LG(this._getSelector(selector, this.selector));\n    };\n    lgQuery.prototype.first = function() {\n        if (this.selector && this.selector.length !== undefined) {\n            return $LG(this.selector[0]);\n        } else {\n            return $LG(this.selector);\n        }\n    };\n    lgQuery.prototype.eq = function(index) {\n        return $LG(this.selector[index]);\n    };\n    lgQuery.prototype.parent = function() {\n        return $LG(this.selector.parentElement);\n    };\n    lgQuery.prototype.get = function() {\n        return this._getFirstEl();\n    };\n    lgQuery.prototype.removeAttr = function(attributes) {\n        var attrs = attributes.split(\" \");\n        this._each(function(el) {\n            attrs.forEach(function(attr) {\n                return el.removeAttribute(attr);\n            });\n        });\n        return this;\n    };\n    lgQuery.prototype.wrap = function(className) {\n        if (!this.firstElement) {\n            return this;\n        }\n        var wrapper = document.createElement(\"div\");\n        wrapper.className = className;\n        this.firstElement.parentNode.insertBefore(wrapper, this.firstElement);\n        this.firstElement.parentNode.removeChild(this.firstElement);\n        wrapper.appendChild(this.firstElement);\n        return this;\n    };\n    lgQuery.prototype.addClass = function(classNames) {\n        if (classNames === void 0) {\n            classNames = \"\";\n        }\n        this._each(function(el) {\n            // IE doesn't support multiple arguments\n            classNames.split(\" \").forEach(function(className) {\n                if (className) {\n                    el.classList.add(className);\n                }\n            });\n        });\n        return this;\n    };\n    lgQuery.prototype.removeClass = function(classNames) {\n        this._each(function(el) {\n            // IE doesn't support multiple arguments\n            classNames.split(\" \").forEach(function(className) {\n                if (className) {\n                    el.classList.remove(className);\n                }\n            });\n        });\n        return this;\n    };\n    lgQuery.prototype.hasClass = function(className) {\n        if (!this.firstElement) {\n            return false;\n        }\n        return this.firstElement.classList.contains(className);\n    };\n    lgQuery.prototype.hasAttribute = function(attribute) {\n        if (!this.firstElement) {\n            return false;\n        }\n        return this.firstElement.hasAttribute(attribute);\n    };\n    lgQuery.prototype.toggleClass = function(className) {\n        if (!this.firstElement) {\n            return this;\n        }\n        if (this.hasClass(className)) {\n            this.removeClass(className);\n        } else {\n            this.addClass(className);\n        }\n        return this;\n    };\n    lgQuery.prototype.css = function(property, value) {\n        var _this = this;\n        this._each(function(el) {\n            _this._setCssVendorPrefix(el, property, value);\n        });\n        return this;\n    };\n    // Need to pass separate namespaces for separate elements\n    lgQuery.prototype.on = function(events, listener) {\n        var _this = this;\n        if (!this.selector) {\n            return this;\n        }\n        events.split(\" \").forEach(function(event) {\n            if (!Array.isArray(lgQuery.eventListeners[event])) {\n                lgQuery.eventListeners[event] = [];\n            }\n            lgQuery.eventListeners[event].push(listener);\n            _this.selector.addEventListener(event.split(\".\")[0], listener);\n        });\n        return this;\n    };\n    // @todo - test this\n    lgQuery.prototype.once = function(event, listener) {\n        var _this = this;\n        this.on(event, function() {\n            _this.off(event);\n            listener(event);\n        });\n        return this;\n    };\n    lgQuery.prototype.off = function(event) {\n        var _this = this;\n        if (!this.selector) {\n            return this;\n        }\n        Object.keys(lgQuery.eventListeners).forEach(function(eventName) {\n            if (_this.isEventMatched(event, eventName)) {\n                lgQuery.eventListeners[eventName].forEach(function(listener) {\n                    _this.selector.removeEventListener(eventName.split(\".\")[0], listener);\n                });\n                lgQuery.eventListeners[eventName] = [];\n            }\n        });\n        return this;\n    };\n    lgQuery.prototype.trigger = function(event, detail) {\n        if (!this.firstElement) {\n            return this;\n        }\n        var customEvent = new CustomEvent(event.split(\".\")[0], {\n            detail: detail || null\n        });\n        this.firstElement.dispatchEvent(customEvent);\n        return this;\n    };\n    // Does not support IE\n    lgQuery.prototype.load = function(url) {\n        var _this = this;\n        fetch(url).then(function(res) {\n            return res.text();\n        }).then(function(html) {\n            _this.selector.innerHTML = html;\n        });\n        return this;\n    };\n    lgQuery.prototype.html = function(html) {\n        if (html === undefined) {\n            if (!this.firstElement) {\n                return \"\";\n            }\n            return this.firstElement.innerHTML;\n        }\n        this._each(function(el) {\n            el.innerHTML = html;\n        });\n        return this;\n    };\n    lgQuery.prototype.append = function(html) {\n        this._each(function(el) {\n            if (typeof html === \"string\") {\n                el.insertAdjacentHTML(\"beforeend\", html);\n            } else {\n                el.appendChild(html);\n            }\n        });\n        return this;\n    };\n    lgQuery.prototype.prepend = function(html) {\n        this._each(function(el) {\n            el.insertAdjacentHTML(\"afterbegin\", html);\n        });\n        return this;\n    };\n    lgQuery.prototype.remove = function() {\n        this._each(function(el) {\n            el.parentNode.removeChild(el);\n        });\n        return this;\n    };\n    lgQuery.prototype.empty = function() {\n        this._each(function(el) {\n            el.innerHTML = \"\";\n        });\n        return this;\n    };\n    lgQuery.prototype.scrollTop = function(scrollTop) {\n        if (scrollTop !== undefined) {\n            document.body.scrollTop = scrollTop;\n            document.documentElement.scrollTop = scrollTop;\n            return this;\n        } else {\n            return window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n        }\n    };\n    lgQuery.prototype.scrollLeft = function(scrollLeft) {\n        if (scrollLeft !== undefined) {\n            document.body.scrollLeft = scrollLeft;\n            document.documentElement.scrollLeft = scrollLeft;\n            return this;\n        } else {\n            return window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;\n        }\n    };\n    lgQuery.prototype.offset = function() {\n        if (!this.firstElement) {\n            return {\n                left: 0,\n                top: 0\n            };\n        }\n        var rect = this.firstElement.getBoundingClientRect();\n        var bodyMarginLeft = $LG(\"body\").style().marginLeft;\n        // Minus body margin - https://stackoverflow.com/questions/30711548/is-getboundingclientrect-left-returning-a-wrong-value\n        return {\n            left: rect.left - parseFloat(bodyMarginLeft) + this.scrollLeft(),\n            top: rect.top + this.scrollTop()\n        };\n    };\n    lgQuery.prototype.style = function() {\n        if (!this.firstElement) {\n            return {};\n        }\n        return this.firstElement.currentStyle || window.getComputedStyle(this.firstElement);\n    };\n    // Width without padding and border even if box-sizing is used.\n    lgQuery.prototype.width = function() {\n        var style = this.style();\n        return this.firstElement.clientWidth - parseFloat(style.paddingLeft) - parseFloat(style.paddingRight);\n    };\n    // Height without padding and border even if box-sizing is used.\n    lgQuery.prototype.height = function() {\n        var style = this.style();\n        return this.firstElement.clientHeight - parseFloat(style.paddingTop) - parseFloat(style.paddingBottom);\n    };\n    lgQuery.eventListeners = {};\n    return lgQuery;\n}();\nfunction $LG(selector) {\n    initLgPolyfills();\n    return new lgQuery(selector);\n}\nvar defaultDynamicOptions = [\n    \"src\",\n    \"sources\",\n    \"subHtml\",\n    \"subHtmlUrl\",\n    \"html\",\n    \"video\",\n    \"poster\",\n    \"slideName\",\n    \"responsive\",\n    \"srcset\",\n    \"sizes\",\n    \"iframe\",\n    \"downloadUrl\",\n    \"download\",\n    \"width\",\n    \"facebookShareUrl\",\n    \"tweetText\",\n    \"iframeTitle\",\n    \"twitterShareUrl\",\n    \"pinterestShareUrl\",\n    \"pinterestText\",\n    \"fbHtml\",\n    \"disqusIdentifier\",\n    \"disqusUrl\"\n];\n// Convert html data-attribute to camalcase\nfunction convertToData(attr) {\n    // FInd a way for lgsize\n    if (attr === \"href\") {\n        return \"src\";\n    }\n    attr = attr.replace(\"data-\", \"\");\n    attr = attr.charAt(0).toLowerCase() + attr.slice(1);\n    attr = attr.replace(/-([a-z])/g, function(g) {\n        return g[1].toUpperCase();\n    });\n    return attr;\n}\nvar utils = {\n    /**\r\n     * get possible width and height from the lgSize attribute. Used for ZoomFromOrigin option\r\n     */ getSize: function(el, container, spacing, defaultLgSize) {\n        if (spacing === void 0) {\n            spacing = 0;\n        }\n        var LGel = $LG(el);\n        var lgSize = LGel.attr(\"data-lg-size\") || defaultLgSize;\n        if (!lgSize) {\n            return;\n        }\n        var isResponsiveSizes = lgSize.split(\",\");\n        // if at-least two viewport sizes are available\n        if (isResponsiveSizes[1]) {\n            var wWidth = window.innerWidth;\n            for(var i = 0; i < isResponsiveSizes.length; i++){\n                var size_1 = isResponsiveSizes[i];\n                var responsiveWidth = parseInt(size_1.split(\"-\")[2], 10);\n                if (responsiveWidth > wWidth) {\n                    lgSize = size_1;\n                    break;\n                }\n                // take last item as last option\n                if (i === isResponsiveSizes.length - 1) {\n                    lgSize = size_1;\n                }\n            }\n        }\n        var size = lgSize.split(\"-\");\n        var width = parseInt(size[0], 10);\n        var height = parseInt(size[1], 10);\n        var cWidth = container.width();\n        var cHeight = container.height() - spacing;\n        var maxWidth = Math.min(cWidth, width);\n        var maxHeight = Math.min(cHeight, height);\n        var ratio = Math.min(maxWidth / width, maxHeight / height);\n        return {\n            width: width * ratio,\n            height: height * ratio\n        };\n    },\n    /**\r\n     * @desc Get transform value based on the imageSize. Used for ZoomFromOrigin option\r\n     * @param {jQuery Element}\r\n     * @returns {String} Transform CSS string\r\n     */ getTransform: function(el, container, top, bottom, imageSize) {\n        if (!imageSize) {\n            return;\n        }\n        var LGel = $LG(el).find(\"img\").first();\n        if (!LGel.get()) {\n            return;\n        }\n        var containerRect = container.get().getBoundingClientRect();\n        var wWidth = containerRect.width;\n        // using innerWidth to include mobile safari bottom bar\n        var wHeight = container.height() - (top + bottom);\n        var elWidth = LGel.width();\n        var elHeight = LGel.height();\n        var elStyle = LGel.style();\n        var x = (wWidth - elWidth) / 2 - LGel.offset().left + (parseFloat(elStyle.paddingLeft) || 0) + (parseFloat(elStyle.borderLeft) || 0) + $LG(window).scrollLeft() + containerRect.left;\n        var y = (wHeight - elHeight) / 2 - LGel.offset().top + (parseFloat(elStyle.paddingTop) || 0) + (parseFloat(elStyle.borderTop) || 0) + $LG(window).scrollTop() + top;\n        var scX = elWidth / imageSize.width;\n        var scY = elHeight / imageSize.height;\n        var transform = \"translate3d(\" + (x *= -1) + \"px, \" + (y *= -1) + \"px, 0) scale3d(\" + scX + \", \" + scY + \", 1)\";\n        return transform;\n    },\n    getIframeMarkup: function(iframeWidth, iframeHeight, iframeMaxWidth, iframeMaxHeight, src, iframeTitle) {\n        var title = iframeTitle ? 'title=\"' + iframeTitle + '\"' : \"\";\n        return '<div class=\"lg-video-cont lg-has-iframe\" style=\"width:' + iframeWidth + \"; max-width:\" + iframeMaxWidth + \"; height: \" + iframeHeight + \"; max-height:\" + iframeMaxHeight + '\">\\n                    <iframe class=\"lg-object\" frameborder=\"0\" ' + title + ' src=\"' + src + '\"  allowfullscreen=\"true\"></iframe>\\n                </div>';\n    },\n    getImgMarkup: function(index, src, altAttr, srcset, sizes, sources) {\n        var srcsetAttr = srcset ? 'srcset=\"' + srcset + '\"' : \"\";\n        var sizesAttr = sizes ? 'sizes=\"' + sizes + '\"' : \"\";\n        var imgMarkup = \"<img \" + altAttr + \" \" + srcsetAttr + \"  \" + sizesAttr + ' class=\"lg-object lg-image\" data-index=\"' + index + '\" src=\"' + src + '\" />';\n        var sourceTag = \"\";\n        if (sources) {\n            var sourceObj = typeof sources === \"string\" ? JSON.parse(sources) : sources;\n            sourceTag = sourceObj.map(function(source) {\n                var attrs = \"\";\n                Object.keys(source).forEach(function(key) {\n                    // Do not remove the first space as it is required to separate the attributes\n                    attrs += \" \" + key + '=\"' + source[key] + '\"';\n                });\n                return \"<source \" + attrs + \"></source>\";\n            });\n        }\n        return \"\" + sourceTag + imgMarkup;\n    },\n    // Get src from responsive src\n    getResponsiveSrc: function(srcItms) {\n        var rsWidth = [];\n        var rsSrc = [];\n        var src = \"\";\n        for(var i = 0; i < srcItms.length; i++){\n            var _src = srcItms[i].split(\" \");\n            // Manage empty space\n            if (_src[0] === \"\") {\n                _src.splice(0, 1);\n            }\n            rsSrc.push(_src[0]);\n            rsWidth.push(_src[1]);\n        }\n        var wWidth = window.innerWidth;\n        for(var j = 0; j < rsWidth.length; j++){\n            if (parseInt(rsWidth[j], 10) > wWidth) {\n                src = rsSrc[j];\n                break;\n            }\n        }\n        return src;\n    },\n    isImageLoaded: function(img) {\n        if (!img) return false;\n        // During the onload event, IE correctly identifies any images that\n        // weren’t downloaded as not complete. Others should too. Gecko-based\n        // browsers act like NS4 in that they report this incorrectly.\n        if (!img.complete) {\n            return false;\n        }\n        // However, they do have two very useful properties: naturalWidth and\n        // naturalHeight. These give the true size of the image. If it failed\n        // to load, either of these should be zero.\n        if (img.naturalWidth === 0) {\n            return false;\n        }\n        // No other way of checking: assume it’s ok.\n        return true;\n    },\n    getVideoPosterMarkup: function(_poster, dummyImg, videoContStyle, playVideoString, _isVideo) {\n        var videoClass = \"\";\n        if (_isVideo && _isVideo.youtube) {\n            videoClass = \"lg-has-youtube\";\n        } else if (_isVideo && _isVideo.vimeo) {\n            videoClass = \"lg-has-vimeo\";\n        } else {\n            videoClass = \"lg-has-html5\";\n        }\n        return '<div class=\"lg-video-cont ' + videoClass + '\" style=\"' + videoContStyle + '\">\\n                <div class=\"lg-video-play-button\">\\n                <svg\\n                    viewBox=\"0 0 20 20\"\\n                    preserveAspectRatio=\"xMidYMid\"\\n                    focusable=\"false\"\\n                    aria-labelledby=\"' + playVideoString + '\"\\n                    role=\"img\"\\n                    class=\"lg-video-play-icon\"\\n                >\\n                    <title>' + playVideoString + '</title>\\n                    <polygon class=\"lg-video-play-icon-inner\" points=\"1,0 20,10 1,20\"></polygon>\\n                </svg>\\n                <svg class=\"lg-video-play-icon-bg\" viewBox=\"0 0 50 50\" focusable=\"false\">\\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle></svg>\\n                <svg class=\"lg-video-play-icon-circle\" viewBox=\"0 0 50 50\" focusable=\"false\">\\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle>\\n                </svg>\\n            </div>\\n            ' + (dummyImg || \"\") + '\\n            <img class=\"lg-object lg-video-poster\" src=\"' + _poster + '\" />\\n        </div>';\n    },\n    getFocusableElements: function(container) {\n        var elements = container.querySelectorAll('a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])');\n        var visibleElements = [].filter.call(elements, function(element) {\n            var style = window.getComputedStyle(element);\n            return style.display !== \"none\" && style.visibility !== \"hidden\";\n        });\n        return visibleElements;\n    },\n    /**\r\n     * @desc Create dynamic elements array from gallery items when dynamic option is false\r\n     * It helps to avoid frequent DOM interaction\r\n     * and avoid multiple checks for dynamic elments\r\n     *\r\n     * @returns {Array} dynamicEl\r\n     */ getDynamicOptions: function(items, extraProps, getCaptionFromTitleOrAlt, exThumbImage) {\n        var dynamicElements = [];\n        var availableDynamicOptions = __spreadArrays(defaultDynamicOptions, extraProps);\n        [].forEach.call(items, function(item) {\n            var dynamicEl = {};\n            for(var i = 0; i < item.attributes.length; i++){\n                var attr = item.attributes[i];\n                if (attr.specified) {\n                    var dynamicAttr = convertToData(attr.name);\n                    var label = \"\";\n                    if (availableDynamicOptions.indexOf(dynamicAttr) > -1) {\n                        label = dynamicAttr;\n                    }\n                    if (label) {\n                        dynamicEl[label] = attr.value;\n                    }\n                }\n            }\n            var currentItem = $LG(item);\n            var alt = currentItem.find(\"img\").first().attr(\"alt\");\n            var title = currentItem.attr(\"title\");\n            var thumb = exThumbImage ? currentItem.attr(exThumbImage) : currentItem.find(\"img\").first().attr(\"src\");\n            dynamicEl.thumb = thumb;\n            if (getCaptionFromTitleOrAlt && !dynamicEl.subHtml) {\n                dynamicEl.subHtml = title || alt || \"\";\n            }\n            dynamicEl.alt = alt || title || \"\";\n            dynamicElements.push(dynamicEl);\n        });\n        return dynamicElements;\n    },\n    isMobile: function() {\n        return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    },\n    /**\r\n     * @desc Check the given src is video\r\n     * @param {String} src\r\n     * @return {Object} video type\r\n     * Ex:{ youtube  :  [\"//www.youtube.com/watch?v=c0asJgSyxcY\", \"c0asJgSyxcY\"] }\r\n     *\r\n     * @todo - this information can be moved to dynamicEl to avoid frequent calls\r\n     */ isVideo: function(src, isHTML5VIdeo, index) {\n        if (!src) {\n            if (isHTML5VIdeo) {\n                return {\n                    html5: true\n                };\n            } else {\n                console.error(\"lightGallery :- data-src is not provided on slide item \" + (index + 1) + \". Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/\");\n                return;\n            }\n        }\n        var youtube = src.match(/\\/\\/(?:www\\.)?youtu(?:\\.be|be\\.com|be-nocookie\\.com)\\/(?:watch\\?v=|embed\\/)?([a-z0-9\\-\\_\\%]+)([\\&|?][\\S]*)*/i);\n        var vimeo = src.match(/\\/\\/(?:www\\.)?(?:player\\.)?vimeo.com\\/(?:video\\/)?([0-9a-z\\-_]+)(.*)?/i);\n        var wistia = src.match(/https?:\\/\\/(.+)?(wistia\\.com|wi\\.st)\\/(medias|embed)\\/([0-9a-z\\-_]+)(.*)/);\n        if (youtube) {\n            return {\n                youtube: youtube\n            };\n        } else if (vimeo) {\n            return {\n                vimeo: vimeo\n            };\n        } else if (wistia) {\n            return {\n                wistia: wistia\n            };\n        }\n    }\n};\n// @ref - https://stackoverflow.com/questions/3971841/how-to-resize-images-proportionally-keeping-the-aspect-ratio\n// @ref - https://2ality.com/2017/04/setting-up-multi-platform-packages.html\n// Unique id for each gallery\nvar lgId = 0;\nvar LightGallery = /** @class */ function() {\n    function LightGallery(element, options) {\n        this.lgOpened = false;\n        this.index = 0;\n        // lightGallery modules\n        this.plugins = [];\n        // false when lightGallery load first slide content;\n        this.lGalleryOn = false;\n        // True when a slide animation is in progress\n        this.lgBusy = false;\n        this.currentItemsInDom = [];\n        // Scroll top value before lightGallery is opened\n        this.prevScrollTop = 0;\n        this.bodyPaddingRight = 0;\n        this.isDummyImageRemoved = false;\n        this.dragOrSwipeEnabled = false;\n        this.mediaContainerPosition = {\n            top: 0,\n            bottom: 0\n        };\n        if (!element) {\n            return this;\n        }\n        lgId++;\n        this.lgId = lgId;\n        this.el = element;\n        this.LGel = $LG(element);\n        this.generateSettings(options);\n        this.buildModules();\n        // When using dynamic mode, ensure dynamicEl is an array\n        if (this.settings.dynamic && this.settings.dynamicEl !== undefined && !Array.isArray(this.settings.dynamicEl)) {\n            throw \"When using dynamic mode, you must also define dynamicEl as an Array.\";\n        }\n        this.galleryItems = this.getItems();\n        this.normalizeSettings();\n        // Gallery items\n        this.init();\n        this.validateLicense();\n        return this;\n    }\n    LightGallery.prototype.generateSettings = function(options) {\n        // lightGallery settings\n        this.settings = __assign(__assign({}, lightGalleryCoreSettings), options);\n        if (this.settings.isMobile && typeof this.settings.isMobile === \"function\" ? this.settings.isMobile() : utils.isMobile()) {\n            var mobileSettings = __assign(__assign({}, this.settings.mobileSettings), this.settings.mobileSettings);\n            this.settings = __assign(__assign({}, this.settings), mobileSettings);\n        }\n    };\n    LightGallery.prototype.normalizeSettings = function() {\n        if (this.settings.slideEndAnimation) {\n            this.settings.hideControlOnEnd = false;\n        }\n        if (!this.settings.closable) {\n            this.settings.swipeToClose = false;\n        }\n        // And reset it on close to get the correct value next time\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\n        // At the moment, Zoom from image doesn't support dynamic options\n        // @todo add zoomFromOrigin support for dynamic images\n        if (this.settings.dynamic) {\n            this.zoomFromOrigin = false;\n        }\n        if (!this.settings.container) {\n            this.settings.container = document.body;\n        }\n        // settings.preload should not be grater than $item.length\n        this.settings.preload = Math.min(this.settings.preload, this.galleryItems.length);\n    };\n    LightGallery.prototype.init = function() {\n        var _this = this;\n        this.addSlideVideoInfo(this.galleryItems);\n        this.buildStructure();\n        this.LGel.trigger(lGEvents.init, {\n            instance: this\n        });\n        if (this.settings.keyPress) {\n            this.keyPress();\n        }\n        setTimeout(function() {\n            _this.enableDrag();\n            _this.enableSwipe();\n            _this.triggerPosterClick();\n        }, 50);\n        this.arrow();\n        if (this.settings.mousewheel) {\n            this.mousewheel();\n        }\n        if (!this.settings.dynamic) {\n            this.openGalleryOnItemClick();\n        }\n    };\n    LightGallery.prototype.openGalleryOnItemClick = function() {\n        var _this = this;\n        var _loop_1 = function(index) {\n            var element = this_1.items[index];\n            var $element = $LG(element);\n            // Using different namespace for click because click event should not unbind if selector is same object('this')\n            // @todo manage all event listners - should have namespace that represent element\n            var uuid = lgQuery.generateUUID();\n            $element.attr(\"data-lg-id\", uuid).on(\"click.lgcustom-item-\" + uuid, function(e) {\n                e.preventDefault();\n                var currentItemIndex = _this.settings.index || index;\n                _this.openGallery(currentItemIndex, element);\n            });\n        };\n        var this_1 = this;\n        // Using for loop instead of using bubbling as the items can be any html element.\n        for(var index = 0; index < this.items.length; index++){\n            _loop_1(index);\n        }\n    };\n    /**\r\n     * Module constructor\r\n     * Modules are build incrementally.\r\n     * Gallery should be opened only once all the modules are initialized.\r\n     * use moduleBuildTimeout to make sure this\r\n     */ LightGallery.prototype.buildModules = function() {\n        var _this = this;\n        this.settings.plugins.forEach(function(plugin) {\n            _this.plugins.push(new plugin(_this, $LG));\n        });\n    };\n    LightGallery.prototype.validateLicense = function() {\n        if (!this.settings.licenseKey) {\n            console.error(\"Please provide a valid license key\");\n        } else if (this.settings.licenseKey === \"0000-0000-000-0000\") {\n            console.warn(\"lightGallery: \" + this.settings.licenseKey + \" license key is not valid for production use\");\n        }\n    };\n    LightGallery.prototype.getSlideItem = function(index) {\n        return $LG(this.getSlideItemId(index));\n    };\n    LightGallery.prototype.getSlideItemId = function(index) {\n        return \"#lg-item-\" + this.lgId + \"-\" + index;\n    };\n    LightGallery.prototype.getIdName = function(id) {\n        return id + \"-\" + this.lgId;\n    };\n    LightGallery.prototype.getElementById = function(id) {\n        return $LG(\"#\" + this.getIdName(id));\n    };\n    LightGallery.prototype.manageSingleSlideClassName = function() {\n        if (this.galleryItems.length < 2) {\n            this.outer.addClass(\"lg-single-item\");\n        } else {\n            this.outer.removeClass(\"lg-single-item\");\n        }\n    };\n    LightGallery.prototype.buildStructure = function() {\n        var _this = this;\n        var container = this.$container && this.$container.get();\n        if (container) {\n            return;\n        }\n        var controls = \"\";\n        var subHtmlCont = \"\";\n        // Create controls\n        if (this.settings.controls) {\n            controls = '<button type=\"button\" id=\"' + this.getIdName(\"lg-prev\") + '\" aria-label=\"' + this.settings.strings[\"previousSlide\"] + '\" class=\"lg-prev lg-icon\"> ' + this.settings.prevHtml + ' </button>\\n                <button type=\"button\" id=\"' + this.getIdName(\"lg-next\") + '\" aria-label=\"' + this.settings.strings[\"nextSlide\"] + '\" class=\"lg-next lg-icon\"> ' + this.settings.nextHtml + \" </button>\";\n        }\n        if (this.settings.appendSubHtmlTo !== \".lg-item\") {\n            subHtmlCont = '<div class=\"lg-sub-html\" role=\"status\" aria-live=\"polite\"></div>';\n        }\n        var addClasses = \"\";\n        if (this.settings.allowMediaOverlap) {\n            // Do not remove space before last single quote\n            addClasses += \"lg-media-overlap \";\n        }\n        var ariaLabelledby = this.settings.ariaLabelledby ? 'aria-labelledby=\"' + this.settings.ariaLabelledby + '\"' : \"\";\n        var ariaDescribedby = this.settings.ariaDescribedby ? 'aria-describedby=\"' + this.settings.ariaDescribedby + '\"' : \"\";\n        var containerClassName = \"lg-container \" + this.settings.addClass + \" \" + (document.body !== this.settings.container ? \"lg-inline\" : \"\");\n        var closeIcon = this.settings.closable && this.settings.showCloseIcon ? '<button type=\"button\" aria-label=\"' + this.settings.strings[\"closeGallery\"] + '\" id=\"' + this.getIdName(\"lg-close\") + '\" class=\"lg-close lg-icon\"></button>' : \"\";\n        var maximizeIcon = this.settings.showMaximizeIcon ? '<button type=\"button\" aria-label=\"' + this.settings.strings[\"toggleMaximize\"] + '\" id=\"' + this.getIdName(\"lg-maximize\") + '\" class=\"lg-maximize lg-icon\"></button>' : \"\";\n        var template = '\\n        <div class=\"' + containerClassName + '\" id=\"' + this.getIdName(\"lg-container\") + '\" tabindex=\"-1\" aria-modal=\"true\" ' + ariaLabelledby + \" \" + ariaDescribedby + ' role=\"dialog\"\\n        >\\n            <div id=\"' + this.getIdName(\"lg-backdrop\") + '\" class=\"lg-backdrop\"></div>\\n\\n            <div id=\"' + this.getIdName(\"lg-outer\") + '\" class=\"lg-outer lg-use-css3 lg-css3 lg-hide-items ' + addClasses + ' \">\\n\\n              <div id=\"' + this.getIdName(\"lg-content\") + '\" class=\"lg-content\">\\n                <div id=\"' + this.getIdName(\"lg-inner\") + '\" class=\"lg-inner\">\\n                </div>\\n                ' + controls + '\\n              </div>\\n                <div id=\"' + this.getIdName(\"lg-toolbar\") + '\" class=\"lg-toolbar lg-group\">\\n                    ' + maximizeIcon + \"\\n                    \" + closeIcon + \"\\n                    </div>\\n                    \" + (this.settings.appendSubHtmlTo === \".lg-outer\" ? subHtmlCont : \"\") + '\\n                <div id=\"' + this.getIdName(\"lg-components\") + '\" class=\"lg-components\">\\n                    ' + (this.settings.appendSubHtmlTo === \".lg-sub-html\" ? subHtmlCont : \"\") + \"\\n                </div>\\n            </div>\\n        </div>\\n        \";\n        $LG(this.settings.container).append(template);\n        if (document.body !== this.settings.container) {\n            $LG(this.settings.container).css(\"position\", \"relative\");\n        }\n        this.outer = this.getElementById(\"lg-outer\");\n        this.$lgComponents = this.getElementById(\"lg-components\");\n        this.$backdrop = this.getElementById(\"lg-backdrop\");\n        this.$container = this.getElementById(\"lg-container\");\n        this.$inner = this.getElementById(\"lg-inner\");\n        this.$content = this.getElementById(\"lg-content\");\n        this.$toolbar = this.getElementById(\"lg-toolbar\");\n        this.$backdrop.css(\"transition-duration\", this.settings.backdropDuration + \"ms\");\n        var outerClassNames = this.settings.mode + \" \";\n        this.manageSingleSlideClassName();\n        if (this.settings.enableDrag) {\n            outerClassNames += \"lg-grab \";\n        }\n        this.outer.addClass(outerClassNames);\n        this.$inner.css(\"transition-timing-function\", this.settings.easing);\n        this.$inner.css(\"transition-duration\", this.settings.speed + \"ms\");\n        if (this.settings.download) {\n            this.$toolbar.append('<a id=\"' + this.getIdName(\"lg-download\") + '\" target=\"_blank\" rel=\"noopener\" aria-label=\"' + this.settings.strings[\"download\"] + '\" download class=\"lg-download lg-icon\"></a>');\n        }\n        this.counter();\n        $LG(window).on(\"resize.lg.global\" + this.lgId + \" orientationchange.lg.global\" + this.lgId, function() {\n            _this.refreshOnResize();\n        });\n        this.hideBars();\n        this.manageCloseGallery();\n        this.toggleMaximize();\n        this.initModules();\n    };\n    LightGallery.prototype.refreshOnResize = function() {\n        if (this.lgOpened) {\n            var currentGalleryItem = this.galleryItems[this.index];\n            var __slideVideoInfo = currentGalleryItem.__slideVideoInfo;\n            this.mediaContainerPosition = this.getMediaContainerPosition();\n            var _a = this.mediaContainerPosition, top_1 = _a.top, bottom = _a.bottom;\n            this.currentImageSize = utils.getSize(this.items[this.index], this.outer, top_1 + bottom, __slideVideoInfo && this.settings.videoMaxSize);\n            if (__slideVideoInfo) {\n                this.resizeVideoSlide(this.index, this.currentImageSize);\n            }\n            if (this.zoomFromOrigin && !this.isDummyImageRemoved) {\n                var imgStyle = this.getDummyImgStyles(this.currentImageSize);\n                this.outer.find(\".lg-current .lg-dummy-img\").first().attr(\"style\", imgStyle);\n            }\n            this.LGel.trigger(lGEvents.containerResize);\n        }\n    };\n    LightGallery.prototype.resizeVideoSlide = function(index, imageSize) {\n        var lgVideoStyle = this.getVideoContStyle(imageSize);\n        var currentSlide = this.getSlideItem(index);\n        currentSlide.find(\".lg-video-cont\").attr(\"style\", lgVideoStyle);\n    };\n    /**\r\n     * Update slides dynamically.\r\n     * Add, edit or delete slides dynamically when lightGallery is opened.\r\n     * Modify the current gallery items and pass it via updateSlides method\r\n     * @note\r\n     * - Do not mutate existing lightGallery items directly.\r\n     * - Always pass new list of gallery items\r\n     * - You need to take care of thumbnails outside the gallery if any\r\n     * - user this method only if you want to update slides when the gallery is opened. Otherwise, use `refresh()` method.\r\n     * @param items Gallery items\r\n     * @param index After the update operation, which slide gallery should navigate to\r\n     * @category lGPublicMethods\r\n     * @example\r\n     * const plugin = lightGallery();\r\n     *\r\n     * // Adding slides dynamically\r\n     * let galleryItems = [\r\n     * // Access existing lightGallery items\r\n     * // galleryItems are automatically generated internally from the gallery HTML markup\r\n     * // or directly from galleryItems when dynamic gallery is used\r\n     *   ...plugin.galleryItems,\r\n     *     ...[\r\n     *       {\r\n     *         src: 'img/img-1.png',\r\n     *           thumb: 'img/thumb1.png',\r\n     *         },\r\n     *     ],\r\n     *   ];\r\n     *   plugin.updateSlides(\r\n     *     galleryItems,\r\n     *     plugin.index,\r\n     *   );\r\n     *\r\n     *\r\n     * // Remove slides dynamically\r\n     * galleryItems = JSON.parse(\r\n     *   JSON.stringify(updateSlideInstance.galleryItems),\r\n     * );\r\n     * galleryItems.shift();\r\n     * updateSlideInstance.updateSlides(galleryItems, 1);\r\n     * @see <a href=\"/demos/update-slides/\">Demo</a>\r\n     */ LightGallery.prototype.updateSlides = function(items, index) {\n        if (this.index > items.length - 1) {\n            this.index = items.length - 1;\n        }\n        if (items.length === 1) {\n            this.index = 0;\n        }\n        if (!items.length) {\n            this.closeGallery();\n            return;\n        }\n        var currentSrc = this.galleryItems[index].src;\n        this.galleryItems = items;\n        this.updateControls();\n        this.$inner.empty();\n        this.currentItemsInDom = [];\n        var _index = 0;\n        // Find the current index based on source value of the slide\n        this.galleryItems.some(function(galleryItem, itemIndex) {\n            if (galleryItem.src === currentSrc) {\n                _index = itemIndex;\n                return true;\n            }\n            return false;\n        });\n        this.currentItemsInDom = this.organizeSlideItems(_index, -1);\n        this.loadContent(_index, true);\n        this.getSlideItem(_index).addClass(\"lg-current\");\n        this.index = _index;\n        this.updateCurrentCounter(_index);\n        this.LGel.trigger(lGEvents.updateSlides);\n    };\n    // Get gallery items based on multiple conditions\n    LightGallery.prototype.getItems = function() {\n        // Gallery items\n        this.items = [];\n        if (!this.settings.dynamic) {\n            if (this.settings.selector === \"this\") {\n                this.items.push(this.el);\n            } else if (this.settings.selector) {\n                if (typeof this.settings.selector === \"string\") {\n                    if (this.settings.selectWithin) {\n                        var selectWithin = $LG(this.settings.selectWithin);\n                        this.items = selectWithin.find(this.settings.selector).get();\n                    } else {\n                        this.items = this.el.querySelectorAll(this.settings.selector);\n                    }\n                } else {\n                    this.items = this.settings.selector;\n                }\n            } else {\n                this.items = this.el.children;\n            }\n            return utils.getDynamicOptions(this.items, this.settings.extraProps, this.settings.getCaptionFromTitleOrAlt, this.settings.exThumbImage);\n        } else {\n            return this.settings.dynamicEl || [];\n        }\n    };\n    LightGallery.prototype.shouldHideScrollbar = function() {\n        return this.settings.hideScrollbar && document.body === this.settings.container;\n    };\n    LightGallery.prototype.hideScrollbar = function() {\n        if (!this.shouldHideScrollbar()) {\n            return;\n        }\n        this.bodyPaddingRight = parseFloat($LG(\"body\").style().paddingRight);\n        var bodyRect = document.documentElement.getBoundingClientRect();\n        var scrollbarWidth = window.innerWidth - bodyRect.width;\n        $LG(document.body).css(\"padding-right\", scrollbarWidth + this.bodyPaddingRight + \"px\");\n        $LG(document.body).addClass(\"lg-overlay-open\");\n    };\n    LightGallery.prototype.resetScrollBar = function() {\n        if (!this.shouldHideScrollbar()) {\n            return;\n        }\n        $LG(document.body).css(\"padding-right\", this.bodyPaddingRight + \"px\");\n        $LG(document.body).removeClass(\"lg-overlay-open\");\n    };\n    /**\r\n     * Open lightGallery.\r\n     * Open gallery with specific slide by passing index of the slide as parameter.\r\n     * @category lGPublicMethods\r\n     * @param {Number} index  - index of the slide\r\n     * @param {HTMLElement} element - Which image lightGallery should zoom from\r\n     *\r\n     * @example\r\n     * const $dynamicGallery = document.getElementById('dynamic-gallery-demo');\r\n     * const dynamicGallery = lightGallery($dynamicGallery, {\r\n     *     dynamic: true,\r\n     *     dynamicEl: [\r\n     *         {\r\n     *              src: 'img/1.jpg',\r\n     *              thumb: 'img/thumb-1.jpg',\r\n     *              subHtml: '<h4>Image 1 title</h4><p>Image 1 descriptions.</p>',\r\n     *         },\r\n     *         ...\r\n     *     ],\r\n     * });\r\n     * $dynamicGallery.addEventListener('click', function () {\r\n     *     // Starts with third item.(Optional).\r\n     *     // This is useful if you want use dynamic mode with\r\n     *     // custom thumbnails (thumbnails outside gallery),\r\n     *     dynamicGallery.openGallery(2);\r\n     * });\r\n     *\r\n     */ LightGallery.prototype.openGallery = function(index, element) {\n        var _this = this;\n        if (index === void 0) {\n            index = this.settings.index;\n        }\n        // prevent accidental double execution\n        if (this.lgOpened) return;\n        this.lgOpened = true;\n        this.outer.removeClass(\"lg-hide-items\");\n        this.hideScrollbar();\n        // Add display block, but still has opacity 0\n        this.$container.addClass(\"lg-show\");\n        var itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(index, index);\n        this.currentItemsInDom = itemsToBeInsertedToDom;\n        var items = \"\";\n        itemsToBeInsertedToDom.forEach(function(item) {\n            items = items + ('<div id=\"' + item + '\" class=\"lg-item\"></div>');\n        });\n        this.$inner.append(items);\n        this.addHtml(index);\n        var transform = \"\";\n        this.mediaContainerPosition = this.getMediaContainerPosition();\n        var _a = this.mediaContainerPosition, top = _a.top, bottom = _a.bottom;\n        if (!this.settings.allowMediaOverlap) {\n            this.setMediaContainerPosition(top, bottom);\n        }\n        var __slideVideoInfo = this.galleryItems[index].__slideVideoInfo;\n        if (this.zoomFromOrigin && element) {\n            this.currentImageSize = utils.getSize(element, this.outer, top + bottom, __slideVideoInfo && this.settings.videoMaxSize);\n            transform = utils.getTransform(element, this.outer, top, bottom, this.currentImageSize);\n        }\n        if (!this.zoomFromOrigin || !transform) {\n            this.outer.addClass(this.settings.startClass);\n            this.getSlideItem(index).removeClass(\"lg-complete\");\n        }\n        var timeout = this.settings.zoomFromOrigin ? 100 : this.settings.backdropDuration;\n        setTimeout(function() {\n            _this.outer.addClass(\"lg-components-open\");\n        }, timeout);\n        this.index = index;\n        this.LGel.trigger(lGEvents.beforeOpen);\n        // add class lg-current to remove initial transition\n        this.getSlideItem(index).addClass(\"lg-current\");\n        this.lGalleryOn = false;\n        // Store the current scroll top value to scroll back after closing the gallery..\n        this.prevScrollTop = $LG(window).scrollTop();\n        setTimeout(function() {\n            // Need to check both zoomFromOrigin and transform values as we need to set set the\n            // default opening animation if user missed to add the lg-size attribute\n            if (_this.zoomFromOrigin && transform) {\n                var currentSlide_1 = _this.getSlideItem(index);\n                currentSlide_1.css(\"transform\", transform);\n                setTimeout(function() {\n                    currentSlide_1.addClass(\"lg-start-progress lg-start-end-progress\").css(\"transition-duration\", _this.settings.startAnimationDuration + \"ms\");\n                    _this.outer.addClass(\"lg-zoom-from-image\");\n                });\n                setTimeout(function() {\n                    currentSlide_1.css(\"transform\", \"translate3d(0, 0, 0)\");\n                }, 100);\n            }\n            setTimeout(function() {\n                _this.$backdrop.addClass(\"in\");\n                _this.$container.addClass(\"lg-show-in\");\n            }, 10);\n            setTimeout(function() {\n                if (_this.settings.trapFocus && document.body === _this.settings.container) {\n                    _this.trapFocus();\n                }\n            }, _this.settings.backdropDuration + 50);\n            // lg-visible class resets gallery opacity to 1\n            if (!_this.zoomFromOrigin || !transform) {\n                setTimeout(function() {\n                    _this.outer.addClass(\"lg-visible\");\n                }, _this.settings.backdropDuration);\n            }\n            // initiate slide function\n            _this.slide(index, false, false, false);\n            _this.LGel.trigger(lGEvents.afterOpen);\n        });\n        if (document.body === this.settings.container) {\n            $LG(\"html\").addClass(\"lg-on\");\n        }\n    };\n    /**\r\n     * Note - Changing the position of the media on every slide transition creates a flickering effect.\r\n     * Therefore, The height of the caption is calculated dynamically, only once based on the first slide caption.\r\n     * if you have dynamic captions for each media,\r\n     * you can provide an appropriate height for the captions via allowMediaOverlap option\r\n     */ LightGallery.prototype.getMediaContainerPosition = function() {\n        if (this.settings.allowMediaOverlap) {\n            return {\n                top: 0,\n                bottom: 0\n            };\n        }\n        var top = this.$toolbar.get().clientHeight || 0;\n        var subHtml = this.outer.find(\".lg-components .lg-sub-html\").get();\n        var captionHeight = this.settings.defaultCaptionHeight || subHtml && subHtml.clientHeight || 0;\n        var thumbContainer = this.outer.find(\".lg-thumb-outer\").get();\n        var thumbHeight = thumbContainer ? thumbContainer.clientHeight : 0;\n        var bottom = thumbHeight + captionHeight;\n        return {\n            top: top,\n            bottom: bottom\n        };\n    };\n    LightGallery.prototype.setMediaContainerPosition = function(top, bottom) {\n        if (top === void 0) {\n            top = 0;\n        }\n        if (bottom === void 0) {\n            bottom = 0;\n        }\n        this.$content.css(\"top\", top + \"px\").css(\"bottom\", bottom + \"px\");\n    };\n    LightGallery.prototype.hideBars = function() {\n        var _this = this;\n        // Hide controllers if mouse doesn't move for some period\n        setTimeout(function() {\n            _this.outer.removeClass(\"lg-hide-items\");\n            if (_this.settings.hideBarsDelay > 0) {\n                _this.outer.on(\"mousemove.lg click.lg touchstart.lg\", function() {\n                    _this.outer.removeClass(\"lg-hide-items\");\n                    clearTimeout(_this.hideBarTimeout);\n                    // Timeout will be cleared on each slide movement also\n                    _this.hideBarTimeout = setTimeout(function() {\n                        _this.outer.addClass(\"lg-hide-items\");\n                    }, _this.settings.hideBarsDelay);\n                });\n                _this.outer.trigger(\"mousemove.lg\");\n            }\n        }, this.settings.showBarsAfter);\n    };\n    LightGallery.prototype.initPictureFill = function($img) {\n        if (this.settings.supportLegacyBrowser) {\n            try {\n                picturefill({\n                    elements: [\n                        $img.get()\n                    ]\n                });\n            } catch (e) {\n                console.warn(\"lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.\");\n            }\n        }\n    };\n    /**\r\n     *  @desc Create image counter\r\n     *  Ex: 1/10\r\n     */ LightGallery.prototype.counter = function() {\n        if (this.settings.counter) {\n            var counterHtml = '<div class=\"lg-counter\" role=\"status\" aria-live=\"polite\">\\n                <span id=\"' + this.getIdName(\"lg-counter-current\") + '\" class=\"lg-counter-current\">' + (this.index + 1) + ' </span> /\\n                <span id=\"' + this.getIdName(\"lg-counter-all\") + '\" class=\"lg-counter-all\">' + this.galleryItems.length + \" </span></div>\";\n            this.outer.find(this.settings.appendCounterTo).append(counterHtml);\n        }\n    };\n    /**\r\n     *  @desc add sub-html into the slide\r\n     *  @param {Number} index - index of the slide\r\n     */ LightGallery.prototype.addHtml = function(index) {\n        var subHtml;\n        var subHtmlUrl;\n        if (this.galleryItems[index].subHtmlUrl) {\n            subHtmlUrl = this.galleryItems[index].subHtmlUrl;\n        } else {\n            subHtml = this.galleryItems[index].subHtml;\n        }\n        if (!subHtmlUrl) {\n            if (subHtml) {\n                // get first letter of sub-html\n                // if first letter starts with . or # get the html form the jQuery object\n                var fL = subHtml.substring(0, 1);\n                if (fL === \".\" || fL === \"#\") {\n                    if (this.settings.subHtmlSelectorRelative && !this.settings.dynamic) {\n                        subHtml = $LG(this.items).eq(index).find(subHtml).first().html();\n                    } else {\n                        subHtml = $LG(subHtml).first().html();\n                    }\n                }\n            } else {\n                subHtml = \"\";\n            }\n        }\n        if (this.settings.appendSubHtmlTo !== \".lg-item\") {\n            if (subHtmlUrl) {\n                this.outer.find(\".lg-sub-html\").load(subHtmlUrl);\n            } else {\n                this.outer.find(\".lg-sub-html\").html(subHtml);\n            }\n        } else {\n            var currentSlide = $LG(this.getSlideItemId(index));\n            if (subHtmlUrl) {\n                currentSlide.load(subHtmlUrl);\n            } else {\n                currentSlide.append('<div class=\"lg-sub-html\">' + subHtml + \"</div>\");\n            }\n        }\n        // Add lg-empty-html class if title doesn't exist\n        if (typeof subHtml !== \"undefined\" && subHtml !== null) {\n            if (subHtml === \"\") {\n                this.outer.find(this.settings.appendSubHtmlTo).addClass(\"lg-empty-html\");\n            } else {\n                this.outer.find(this.settings.appendSubHtmlTo).removeClass(\"lg-empty-html\");\n            }\n        }\n        this.LGel.trigger(lGEvents.afterAppendSubHtml, {\n            index: index\n        });\n    };\n    /**\r\n     *  @desc Preload slides\r\n     *  @param {Number} index - index of the slide\r\n     * @todo preload not working for the first slide, Also, should work for the first and last slide as well\r\n     */ LightGallery.prototype.preload = function(index) {\n        for(var i = 1; i <= this.settings.preload; i++){\n            if (i >= this.galleryItems.length - index) {\n                break;\n            }\n            this.loadContent(index + i, false);\n        }\n        for(var j = 1; j <= this.settings.preload; j++){\n            if (index - j < 0) {\n                break;\n            }\n            this.loadContent(index - j, false);\n        }\n    };\n    LightGallery.prototype.getDummyImgStyles = function(imageSize) {\n        if (!imageSize) return \"\";\n        return \"width:\" + imageSize.width + \"px;\\n                margin-left: -\" + imageSize.width / 2 + \"px;\\n                margin-top: -\" + imageSize.height / 2 + \"px;\\n                height:\" + imageSize.height + \"px\";\n    };\n    LightGallery.prototype.getVideoContStyle = function(imageSize) {\n        if (!imageSize) return \"\";\n        return \"width:\" + imageSize.width + \"px;\\n                height:\" + imageSize.height + \"px\";\n    };\n    LightGallery.prototype.getDummyImageContent = function($currentSlide, index, alt) {\n        var $currentItem;\n        if (!this.settings.dynamic) {\n            $currentItem = $LG(this.items).eq(index);\n        }\n        if ($currentItem) {\n            var _dummyImgSrc = void 0;\n            if (!this.settings.exThumbImage) {\n                _dummyImgSrc = $currentItem.find(\"img\").first().attr(\"src\");\n            } else {\n                _dummyImgSrc = $currentItem.attr(this.settings.exThumbImage);\n            }\n            if (!_dummyImgSrc) return \"\";\n            var imgStyle = this.getDummyImgStyles(this.currentImageSize);\n            var dummyImgContent = \"<img \" + alt + ' style=\"' + imgStyle + '\" class=\"lg-dummy-img\" src=\"' + _dummyImgSrc + '\" />';\n            $currentSlide.addClass(\"lg-first-slide\");\n            this.outer.addClass(\"lg-first-slide-loading\");\n            return dummyImgContent;\n        }\n        return \"\";\n    };\n    LightGallery.prototype.setImgMarkup = function(src, $currentSlide, index) {\n        var currentGalleryItem = this.galleryItems[index];\n        var alt = currentGalleryItem.alt, srcset = currentGalleryItem.srcset, sizes = currentGalleryItem.sizes, sources = currentGalleryItem.sources;\n        // Use the thumbnail as dummy image which will be resized to actual image size and\n        // displayed on top of actual image\n        var imgContent = \"\";\n        var altAttr = alt ? 'alt=\"' + alt + '\"' : \"\";\n        if (this.isFirstSlideWithZoomAnimation()) {\n            imgContent = this.getDummyImageContent($currentSlide, index, altAttr);\n        } else {\n            imgContent = utils.getImgMarkup(index, src, altAttr, srcset, sizes, sources);\n        }\n        var imgMarkup = '<picture class=\"lg-img-wrap\"> ' + imgContent + \"</picture>\";\n        $currentSlide.prepend(imgMarkup);\n    };\n    LightGallery.prototype.onSlideObjectLoad = function($slide, isHTML5VideoWithoutPoster, onLoad, onError) {\n        var mediaObject = $slide.find(\".lg-object\").first();\n        if (utils.isImageLoaded(mediaObject.get()) || isHTML5VideoWithoutPoster) {\n            onLoad();\n        } else {\n            mediaObject.on(\"load.lg error.lg\", function() {\n                onLoad && onLoad();\n            });\n            mediaObject.on(\"error.lg\", function() {\n                onError && onError();\n            });\n        }\n    };\n    /**\r\n     *\r\n     * @param $el Current slide item\r\n     * @param index\r\n     * @param delay Delay is 0 except first time\r\n     * @param speed Speed is same as delay, except it is 0 if gallery is opened via hash plugin\r\n     * @param isFirstSlide\r\n     */ LightGallery.prototype.onLgObjectLoad = function(currentSlide, index, delay, speed, isFirstSlide, isHTML5VideoWithoutPoster) {\n        var _this = this;\n        this.onSlideObjectLoad(currentSlide, isHTML5VideoWithoutPoster, function() {\n            _this.triggerSlideItemLoad(currentSlide, index, delay, speed, isFirstSlide);\n        }, function() {\n            currentSlide.addClass(\"lg-complete lg-complete_\");\n            currentSlide.html('<span class=\"lg-error-msg\">' + _this.settings.strings[\"mediaLoadingFailed\"] + \"</span>\");\n        });\n    };\n    LightGallery.prototype.triggerSlideItemLoad = function($currentSlide, index, delay, speed, isFirstSlide) {\n        var _this = this;\n        var currentGalleryItem = this.galleryItems[index];\n        // Adding delay for video slides without poster for better performance and user experience\n        // Videos should start playing once once the gallery is completely loaded\n        var _speed = isFirstSlide && this.getSlideType(currentGalleryItem) === \"video\" && !currentGalleryItem.poster ? speed : 0;\n        setTimeout(function() {\n            $currentSlide.addClass(\"lg-complete lg-complete_\");\n            _this.LGel.trigger(lGEvents.slideItemLoad, {\n                index: index,\n                delay: delay || 0,\n                isFirstSlide: isFirstSlide\n            });\n        }, _speed);\n    };\n    LightGallery.prototype.isFirstSlideWithZoomAnimation = function() {\n        return !!(!this.lGalleryOn && this.zoomFromOrigin && this.currentImageSize);\n    };\n    // Add video slideInfo\n    LightGallery.prototype.addSlideVideoInfo = function(items) {\n        var _this = this;\n        items.forEach(function(element, index) {\n            element.__slideVideoInfo = utils.isVideo(element.src, !!element.video, index);\n            if (element.__slideVideoInfo && _this.settings.loadYouTubePoster && !element.poster && element.__slideVideoInfo.youtube) {\n                element.poster = \"//img.youtube.com/vi/\" + element.__slideVideoInfo.youtube[1] + \"/maxresdefault.jpg\";\n            }\n        });\n    };\n    /**\r\n     *  Load slide content into slide.\r\n     *  This is used to load content into slides that is not visible too\r\n     *  @param {Number} index - index of the slide.\r\n     *  @param {Boolean} rec - if true call loadcontent() function again.\r\n     */ LightGallery.prototype.loadContent = function(index, rec) {\n        var _this = this;\n        var currentGalleryItem = this.galleryItems[index];\n        var $currentSlide = $LG(this.getSlideItemId(index));\n        var poster = currentGalleryItem.poster, srcset = currentGalleryItem.srcset, sizes = currentGalleryItem.sizes, sources = currentGalleryItem.sources;\n        var src = currentGalleryItem.src;\n        var video = currentGalleryItem.video;\n        var _html5Video = video && typeof video === \"string\" ? JSON.parse(video) : video;\n        if (currentGalleryItem.responsive) {\n            var srcDyItms = currentGalleryItem.responsive.split(\",\");\n            src = utils.getResponsiveSrc(srcDyItms) || src;\n        }\n        var videoInfo = currentGalleryItem.__slideVideoInfo;\n        var lgVideoStyle = \"\";\n        var iframe = !!currentGalleryItem.iframe;\n        var isFirstSlide = !this.lGalleryOn;\n        // delay for adding complete class. it is 0 except first time.\n        var delay = 0;\n        if (isFirstSlide) {\n            if (this.zoomFromOrigin && this.currentImageSize) {\n                delay = this.settings.startAnimationDuration + 10;\n            } else {\n                delay = this.settings.backdropDuration + 10;\n            }\n        }\n        if (!$currentSlide.hasClass(\"lg-loaded\")) {\n            if (videoInfo) {\n                var _a = this.mediaContainerPosition, top_2 = _a.top, bottom = _a.bottom;\n                var videoSize = utils.getSize(this.items[index], this.outer, top_2 + bottom, videoInfo && this.settings.videoMaxSize);\n                lgVideoStyle = this.getVideoContStyle(videoSize);\n            }\n            if (iframe) {\n                var markup = utils.getIframeMarkup(this.settings.iframeWidth, this.settings.iframeHeight, this.settings.iframeMaxWidth, this.settings.iframeMaxHeight, src, currentGalleryItem.iframeTitle);\n                $currentSlide.prepend(markup);\n            } else if (poster) {\n                var dummyImg = \"\";\n                var hasStartAnimation = isFirstSlide && this.zoomFromOrigin && this.currentImageSize;\n                if (hasStartAnimation) {\n                    dummyImg = this.getDummyImageContent($currentSlide, index, \"\");\n                }\n                var markup = utils.getVideoPosterMarkup(poster, dummyImg || \"\", lgVideoStyle, this.settings.strings[\"playVideo\"], videoInfo);\n                $currentSlide.prepend(markup);\n            } else if (videoInfo) {\n                var markup = '<div class=\"lg-video-cont \" style=\"' + lgVideoStyle + '\"></div>';\n                $currentSlide.prepend(markup);\n            } else {\n                this.setImgMarkup(src, $currentSlide, index);\n                if (srcset || sources) {\n                    var $img = $currentSlide.find(\".lg-object\");\n                    this.initPictureFill($img);\n                }\n            }\n            if (poster || videoInfo) {\n                this.LGel.trigger(lGEvents.hasVideo, {\n                    index: index,\n                    src: src,\n                    html5Video: _html5Video,\n                    hasPoster: !!poster\n                });\n            }\n            this.LGel.trigger(lGEvents.afterAppendSlide, {\n                index: index\n            });\n            if (this.lGalleryOn && this.settings.appendSubHtmlTo === \".lg-item\") {\n                this.addHtml(index);\n            }\n        }\n        // For first time add some delay for displaying the start animation.\n        var _speed = 0;\n        // Do not change the delay value because it is required for zoom plugin.\n        // If gallery opened from direct url (hash) speed value should be 0\n        if (delay && !$LG(document.body).hasClass(\"lg-from-hash\")) {\n            _speed = delay;\n        }\n        // Only for first slide and zoomFromOrigin is enabled\n        if (this.isFirstSlideWithZoomAnimation()) {\n            setTimeout(function() {\n                $currentSlide.removeClass(\"lg-start-end-progress lg-start-progress\").removeAttr(\"style\");\n            }, this.settings.startAnimationDuration + 100);\n            if (!$currentSlide.hasClass(\"lg-loaded\")) {\n                setTimeout(function() {\n                    if (_this.getSlideType(currentGalleryItem) === \"image\") {\n                        var alt = currentGalleryItem.alt;\n                        var altAttr = alt ? 'alt=\"' + alt + '\"' : \"\";\n                        $currentSlide.find(\".lg-img-wrap\").append(utils.getImgMarkup(index, src, altAttr, srcset, sizes, currentGalleryItem.sources));\n                        if (srcset || sources) {\n                            var $img = $currentSlide.find(\".lg-object\");\n                            _this.initPictureFill($img);\n                        }\n                    }\n                    if (_this.getSlideType(currentGalleryItem) === \"image\" || _this.getSlideType(currentGalleryItem) === \"video\" && poster) {\n                        _this.onLgObjectLoad($currentSlide, index, delay, _speed, true, false);\n                        // load remaining slides once the slide is completely loaded\n                        _this.onSlideObjectLoad($currentSlide, !!(videoInfo && videoInfo.html5 && !poster), function() {\n                            _this.loadContentOnFirstSlideLoad(index, $currentSlide, _speed);\n                        }, function() {\n                            _this.loadContentOnFirstSlideLoad(index, $currentSlide, _speed);\n                        });\n                    }\n                }, this.settings.startAnimationDuration + 100);\n            }\n        }\n        // SLide content has been added to dom\n        $currentSlide.addClass(\"lg-loaded\");\n        if (!this.isFirstSlideWithZoomAnimation() || this.getSlideType(currentGalleryItem) === \"video\" && !poster) {\n            this.onLgObjectLoad($currentSlide, index, delay, _speed, isFirstSlide, !!(videoInfo && videoInfo.html5 && !poster));\n        }\n        // When gallery is opened once content is loaded (second time) need to add lg-complete class for css styling\n        if ((!this.zoomFromOrigin || !this.currentImageSize) && $currentSlide.hasClass(\"lg-complete_\") && !this.lGalleryOn) {\n            setTimeout(function() {\n                $currentSlide.addClass(\"lg-complete\");\n            }, this.settings.backdropDuration);\n        }\n        // Content loaded\n        // Need to set lGalleryOn before calling preload function\n        this.lGalleryOn = true;\n        if (rec === true) {\n            if (!$currentSlide.hasClass(\"lg-complete_\")) {\n                $currentSlide.find(\".lg-object\").first().on(\"load.lg error.lg\", function() {\n                    _this.preload(index);\n                });\n            } else {\n                this.preload(index);\n            }\n        }\n    };\n    /**\r\n     * @desc Remove dummy image content and load next slides\r\n     * Called only for the first time if zoomFromOrigin animation is enabled\r\n     * @param index\r\n     * @param $currentSlide\r\n     * @param speed\r\n     */ LightGallery.prototype.loadContentOnFirstSlideLoad = function(index, $currentSlide, speed) {\n        var _this = this;\n        setTimeout(function() {\n            $currentSlide.find(\".lg-dummy-img\").remove();\n            $currentSlide.removeClass(\"lg-first-slide\");\n            _this.outer.removeClass(\"lg-first-slide-loading\");\n            _this.isDummyImageRemoved = true;\n            _this.preload(index);\n        }, speed + 300);\n    };\n    LightGallery.prototype.getItemsToBeInsertedToDom = function(index, prevIndex, numberOfItems) {\n        var _this = this;\n        if (numberOfItems === void 0) {\n            numberOfItems = 0;\n        }\n        var itemsToBeInsertedToDom = [];\n        // Minimum 2 items should be there\n        var possibleNumberOfItems = Math.max(numberOfItems, 3);\n        possibleNumberOfItems = Math.min(possibleNumberOfItems, this.galleryItems.length);\n        var prevIndexItem = \"lg-item-\" + this.lgId + \"-\" + prevIndex;\n        if (this.galleryItems.length <= 3) {\n            this.galleryItems.forEach(function(_element, index) {\n                itemsToBeInsertedToDom.push(\"lg-item-\" + _this.lgId + \"-\" + index);\n            });\n            return itemsToBeInsertedToDom;\n        }\n        if (index < (this.galleryItems.length - 1) / 2) {\n            for(var idx = index; idx > index - possibleNumberOfItems / 2 && idx >= 0; idx--){\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + idx);\n            }\n            var numberOfExistingItems = itemsToBeInsertedToDom.length;\n            for(var idx = 0; idx < possibleNumberOfItems - numberOfExistingItems; idx++){\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + (index + idx + 1));\n            }\n        } else {\n            for(var idx = index; idx <= this.galleryItems.length - 1 && idx < index + possibleNumberOfItems / 2; idx++){\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + idx);\n            }\n            var numberOfExistingItems = itemsToBeInsertedToDom.length;\n            for(var idx = 0; idx < possibleNumberOfItems - numberOfExistingItems; idx++){\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + (index - idx - 1));\n            }\n        }\n        if (this.settings.loop) {\n            if (index === this.galleryItems.length - 1) {\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + 0);\n            } else if (index === 0) {\n                itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + (this.galleryItems.length - 1));\n            }\n        }\n        if (itemsToBeInsertedToDom.indexOf(prevIndexItem) === -1) {\n            itemsToBeInsertedToDom.push(\"lg-item-\" + this.lgId + \"-\" + prevIndex);\n        }\n        return itemsToBeInsertedToDom;\n    };\n    LightGallery.prototype.organizeSlideItems = function(index, prevIndex) {\n        var _this = this;\n        var itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(index, prevIndex, this.settings.numberOfSlideItemsInDom);\n        itemsToBeInsertedToDom.forEach(function(item) {\n            if (_this.currentItemsInDom.indexOf(item) === -1) {\n                _this.$inner.append('<div id=\"' + item + '\" class=\"lg-item\"></div>');\n            }\n        });\n        this.currentItemsInDom.forEach(function(item) {\n            if (itemsToBeInsertedToDom.indexOf(item) === -1) {\n                $LG(\"#\" + item).remove();\n            }\n        });\n        return itemsToBeInsertedToDom;\n    };\n    /**\r\n     * Get previous index of the slide\r\n     */ LightGallery.prototype.getPreviousSlideIndex = function() {\n        var prevIndex = 0;\n        try {\n            var currentItemId = this.outer.find(\".lg-current\").first().attr(\"id\");\n            prevIndex = parseInt(currentItemId.split(\"-\")[3]) || 0;\n        } catch (error) {\n            prevIndex = 0;\n        }\n        return prevIndex;\n    };\n    LightGallery.prototype.setDownloadValue = function(index) {\n        if (this.settings.download) {\n            var currentGalleryItem = this.galleryItems[index];\n            var hideDownloadBtn = currentGalleryItem.downloadUrl === false || currentGalleryItem.downloadUrl === \"false\";\n            if (hideDownloadBtn) {\n                this.outer.addClass(\"lg-hide-download\");\n            } else {\n                var $download = this.getElementById(\"lg-download\");\n                this.outer.removeClass(\"lg-hide-download\");\n                $download.attr(\"href\", currentGalleryItem.downloadUrl || currentGalleryItem.src);\n                if (currentGalleryItem.download) {\n                    $download.attr(\"download\", currentGalleryItem.download);\n                }\n            }\n        }\n    };\n    LightGallery.prototype.makeSlideAnimation = function(direction, currentSlideItem, previousSlideItem) {\n        var _this = this;\n        if (this.lGalleryOn) {\n            previousSlideItem.addClass(\"lg-slide-progress\");\n        }\n        setTimeout(function() {\n            // remove all transitions\n            _this.outer.addClass(\"lg-no-trans\");\n            _this.outer.find(\".lg-item\").removeClass(\"lg-prev-slide lg-next-slide\");\n            if (direction === \"prev\") {\n                //prevslide\n                currentSlideItem.addClass(\"lg-prev-slide\");\n                previousSlideItem.addClass(\"lg-next-slide\");\n            } else {\n                // next slide\n                currentSlideItem.addClass(\"lg-next-slide\");\n                previousSlideItem.addClass(\"lg-prev-slide\");\n            }\n            // give 50 ms for browser to add/remove class\n            setTimeout(function() {\n                _this.outer.find(\".lg-item\").removeClass(\"lg-current\");\n                currentSlideItem.addClass(\"lg-current\");\n                // reset all transitions\n                _this.outer.removeClass(\"lg-no-trans\");\n            }, 50);\n        }, this.lGalleryOn ? this.settings.slideDelay : 0);\n    };\n    /**\r\n     * Goto a specific slide.\r\n     * @param {Number} index - index of the slide\r\n     * @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag\r\n     * @param {Boolean} fromThumb - true if slide function called via thumbnail click\r\n     * @param {String} direction - Direction of the slide(next/prev)\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  // to go to 3rd slide\r\n     *  plugin.slide(2);\r\n     *\r\n     */ LightGallery.prototype.slide = function(index, fromTouch, fromThumb, direction) {\n        var _this = this;\n        var prevIndex = this.getPreviousSlideIndex();\n        this.currentItemsInDom = this.organizeSlideItems(index, prevIndex);\n        // Prevent multiple call, Required for hsh plugin\n        if (this.lGalleryOn && prevIndex === index) {\n            return;\n        }\n        var numberOfGalleryItems = this.galleryItems.length;\n        if (!this.lgBusy) {\n            if (this.settings.counter) {\n                this.updateCurrentCounter(index);\n            }\n            var currentSlideItem = this.getSlideItem(index);\n            var previousSlideItem_1 = this.getSlideItem(prevIndex);\n            var currentGalleryItem = this.galleryItems[index];\n            var videoInfo = currentGalleryItem.__slideVideoInfo;\n            this.outer.attr(\"data-lg-slide-type\", this.getSlideType(currentGalleryItem));\n            this.setDownloadValue(index);\n            if (videoInfo) {\n                var _a = this.mediaContainerPosition, top_3 = _a.top, bottom = _a.bottom;\n                var videoSize = utils.getSize(this.items[index], this.outer, top_3 + bottom, videoInfo && this.settings.videoMaxSize);\n                this.resizeVideoSlide(index, videoSize);\n            }\n            this.LGel.trigger(lGEvents.beforeSlide, {\n                prevIndex: prevIndex,\n                index: index,\n                fromTouch: !!fromTouch,\n                fromThumb: !!fromThumb\n            });\n            this.lgBusy = true;\n            clearTimeout(this.hideBarTimeout);\n            this.arrowDisable(index);\n            if (!direction) {\n                if (index < prevIndex) {\n                    direction = \"prev\";\n                } else if (index > prevIndex) {\n                    direction = \"next\";\n                }\n            }\n            if (!fromTouch) {\n                this.makeSlideAnimation(direction, currentSlideItem, previousSlideItem_1);\n            } else {\n                this.outer.find(\".lg-item\").removeClass(\"lg-prev-slide lg-current lg-next-slide\");\n                var touchPrev = void 0;\n                var touchNext = void 0;\n                if (numberOfGalleryItems > 2) {\n                    touchPrev = index - 1;\n                    touchNext = index + 1;\n                    if (index === 0 && prevIndex === numberOfGalleryItems - 1) {\n                        // next slide\n                        touchNext = 0;\n                        touchPrev = numberOfGalleryItems - 1;\n                    } else if (index === numberOfGalleryItems - 1 && prevIndex === 0) {\n                        // prev slide\n                        touchNext = 0;\n                        touchPrev = numberOfGalleryItems - 1;\n                    }\n                } else {\n                    touchPrev = 0;\n                    touchNext = 1;\n                }\n                if (direction === \"prev\") {\n                    this.getSlideItem(touchNext).addClass(\"lg-next-slide\");\n                } else {\n                    this.getSlideItem(touchPrev).addClass(\"lg-prev-slide\");\n                }\n                currentSlideItem.addClass(\"lg-current\");\n            }\n            // Do not put load content in set timeout as it needs to load immediately when the gallery is opened\n            if (!this.lGalleryOn) {\n                this.loadContent(index, true);\n            } else {\n                setTimeout(function() {\n                    _this.loadContent(index, true);\n                    // Add title if this.settings.appendSubHtmlTo === lg-sub-html\n                    if (_this.settings.appendSubHtmlTo !== \".lg-item\") {\n                        _this.addHtml(index);\n                    }\n                }, this.settings.speed + 50 + (fromTouch ? 0 : this.settings.slideDelay));\n            }\n            setTimeout(function() {\n                _this.lgBusy = false;\n                previousSlideItem_1.removeClass(\"lg-slide-progress\");\n                _this.LGel.trigger(lGEvents.afterSlide, {\n                    prevIndex: prevIndex,\n                    index: index,\n                    fromTouch: fromTouch,\n                    fromThumb: fromThumb\n                });\n            }, (this.lGalleryOn ? this.settings.speed + 100 : 100) + (fromTouch ? 0 : this.settings.slideDelay));\n        }\n        this.index = index;\n    };\n    LightGallery.prototype.updateCurrentCounter = function(index) {\n        this.getElementById(\"lg-counter-current\").html(index + 1 + \"\");\n    };\n    LightGallery.prototype.updateCounterTotal = function() {\n        this.getElementById(\"lg-counter-all\").html(this.galleryItems.length + \"\");\n    };\n    LightGallery.prototype.getSlideType = function(item) {\n        if (item.__slideVideoInfo) {\n            return \"video\";\n        } else if (item.iframe) {\n            return \"iframe\";\n        } else {\n            return \"image\";\n        }\n    };\n    LightGallery.prototype.touchMove = function(startCoords, endCoords, e) {\n        var distanceX = endCoords.pageX - startCoords.pageX;\n        var distanceY = endCoords.pageY - startCoords.pageY;\n        var allowSwipe = false;\n        if (this.swipeDirection) {\n            allowSwipe = true;\n        } else {\n            if (Math.abs(distanceX) > 15) {\n                this.swipeDirection = \"horizontal\";\n                allowSwipe = true;\n            } else if (Math.abs(distanceY) > 15) {\n                this.swipeDirection = \"vertical\";\n                allowSwipe = true;\n            }\n        }\n        if (!allowSwipe) {\n            return;\n        }\n        var $currentSlide = this.getSlideItem(this.index);\n        if (this.swipeDirection === \"horizontal\") {\n            e === null || e === void 0 ? void 0 : e.preventDefault();\n            // reset opacity and transition duration\n            this.outer.addClass(\"lg-dragging\");\n            // move current slide\n            this.setTranslate($currentSlide, distanceX, 0);\n            // move next and prev slide with current slide\n            var width = $currentSlide.get().offsetWidth;\n            var slideWidthAmount = width * 15 / 100;\n            var gutter = slideWidthAmount - Math.abs(distanceX * 10 / 100);\n            this.setTranslate(this.outer.find(\".lg-prev-slide\").first(), -width + distanceX - gutter, 0);\n            this.setTranslate(this.outer.find(\".lg-next-slide\").first(), width + distanceX + gutter, 0);\n        } else if (this.swipeDirection === \"vertical\") {\n            if (this.settings.swipeToClose) {\n                e === null || e === void 0 ? void 0 : e.preventDefault();\n                this.$container.addClass(\"lg-dragging-vertical\");\n                var opacity = 1 - Math.abs(distanceY) / window.innerHeight;\n                this.$backdrop.css(\"opacity\", opacity);\n                var scale = 1 - Math.abs(distanceY) / (window.innerWidth * 2);\n                this.setTranslate($currentSlide, 0, distanceY, scale, scale);\n                if (Math.abs(distanceY) > 100) {\n                    this.outer.addClass(\"lg-hide-items\").removeClass(\"lg-components-open\");\n                }\n            }\n        }\n    };\n    LightGallery.prototype.touchEnd = function(endCoords, startCoords, event) {\n        var _this = this;\n        var distance;\n        // keep slide animation for any mode while dragg/swipe\n        if (this.settings.mode !== \"lg-slide\") {\n            this.outer.addClass(\"lg-slide\");\n        }\n        // set transition duration\n        setTimeout(function() {\n            _this.$container.removeClass(\"lg-dragging-vertical\");\n            _this.outer.removeClass(\"lg-dragging lg-hide-items\").addClass(\"lg-components-open\");\n            var triggerClick = true;\n            if (_this.swipeDirection === \"horizontal\") {\n                distance = endCoords.pageX - startCoords.pageX;\n                var distanceAbs = Math.abs(endCoords.pageX - startCoords.pageX);\n                if (distance < 0 && distanceAbs > _this.settings.swipeThreshold) {\n                    _this.goToNextSlide(true);\n                    triggerClick = false;\n                } else if (distance > 0 && distanceAbs > _this.settings.swipeThreshold) {\n                    _this.goToPrevSlide(true);\n                    triggerClick = false;\n                }\n            } else if (_this.swipeDirection === \"vertical\") {\n                distance = Math.abs(endCoords.pageY - startCoords.pageY);\n                if (_this.settings.closable && _this.settings.swipeToClose && distance > 100) {\n                    _this.closeGallery();\n                    return;\n                } else {\n                    _this.$backdrop.css(\"opacity\", 1);\n                }\n            }\n            _this.outer.find(\".lg-item\").removeAttr(\"style\");\n            if (triggerClick && Math.abs(endCoords.pageX - startCoords.pageX) < 5) {\n                // Trigger click if distance is less than 5 pix\n                var target = $LG(event.target);\n                if (_this.isPosterElement(target)) {\n                    _this.LGel.trigger(lGEvents.posterClick);\n                }\n            }\n            _this.swipeDirection = undefined;\n        });\n        // remove slide class once drag/swipe is completed if mode is not slide\n        setTimeout(function() {\n            if (!_this.outer.hasClass(\"lg-dragging\") && _this.settings.mode !== \"lg-slide\") {\n                _this.outer.removeClass(\"lg-slide\");\n            }\n        }, this.settings.speed + 100);\n    };\n    LightGallery.prototype.enableSwipe = function() {\n        var _this = this;\n        var startCoords = {};\n        var endCoords = {};\n        var isMoved = false;\n        var isSwiping = false;\n        if (this.settings.enableSwipe) {\n            this.$inner.on(\"touchstart.lg\", function(e) {\n                _this.dragOrSwipeEnabled = true;\n                var $item = _this.getSlideItem(_this.index);\n                if (($LG(e.target).hasClass(\"lg-item\") || $item.get().contains(e.target)) && !_this.outer.hasClass(\"lg-zoomed\") && !_this.lgBusy && e.touches.length === 1) {\n                    isSwiping = true;\n                    _this.touchAction = \"swipe\";\n                    _this.manageSwipeClass();\n                    startCoords = {\n                        pageX: e.touches[0].pageX,\n                        pageY: e.touches[0].pageY\n                    };\n                }\n            });\n            this.$inner.on(\"touchmove.lg\", function(e) {\n                if (isSwiping && _this.touchAction === \"swipe\" && e.touches.length === 1) {\n                    endCoords = {\n                        pageX: e.touches[0].pageX,\n                        pageY: e.touches[0].pageY\n                    };\n                    _this.touchMove(startCoords, endCoords, e);\n                    isMoved = true;\n                }\n            });\n            this.$inner.on(\"touchend.lg\", function(event) {\n                if (_this.touchAction === \"swipe\") {\n                    if (isMoved) {\n                        isMoved = false;\n                        _this.touchEnd(endCoords, startCoords, event);\n                    } else if (isSwiping) {\n                        var target = $LG(event.target);\n                        if (_this.isPosterElement(target)) {\n                            _this.LGel.trigger(lGEvents.posterClick);\n                        }\n                    }\n                    _this.touchAction = undefined;\n                    isSwiping = false;\n                }\n            });\n        }\n    };\n    LightGallery.prototype.enableDrag = function() {\n        var _this = this;\n        var startCoords = {};\n        var endCoords = {};\n        var isDraging = false;\n        var isMoved = false;\n        if (this.settings.enableDrag) {\n            this.outer.on(\"mousedown.lg\", function(e) {\n                _this.dragOrSwipeEnabled = true;\n                var $item = _this.getSlideItem(_this.index);\n                if ($LG(e.target).hasClass(\"lg-item\") || $item.get().contains(e.target)) {\n                    if (!_this.outer.hasClass(\"lg-zoomed\") && !_this.lgBusy) {\n                        e.preventDefault();\n                        if (!_this.lgBusy) {\n                            _this.manageSwipeClass();\n                            startCoords = {\n                                pageX: e.pageX,\n                                pageY: e.pageY\n                            };\n                            isDraging = true;\n                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                            _this.outer.get().scrollLeft += 1;\n                            _this.outer.get().scrollLeft -= 1;\n                            // *\n                            _this.outer.removeClass(\"lg-grab\").addClass(\"lg-grabbing\");\n                            _this.LGel.trigger(lGEvents.dragStart);\n                        }\n                    }\n                }\n            });\n            $LG(window).on(\"mousemove.lg.global\" + this.lgId, function(e) {\n                if (isDraging && _this.lgOpened) {\n                    isMoved = true;\n                    endCoords = {\n                        pageX: e.pageX,\n                        pageY: e.pageY\n                    };\n                    _this.touchMove(startCoords, endCoords);\n                    _this.LGel.trigger(lGEvents.dragMove);\n                }\n            });\n            $LG(window).on(\"mouseup.lg.global\" + this.lgId, function(event) {\n                if (!_this.lgOpened) {\n                    return;\n                }\n                var target = $LG(event.target);\n                if (isMoved) {\n                    isMoved = false;\n                    _this.touchEnd(endCoords, startCoords, event);\n                    _this.LGel.trigger(lGEvents.dragEnd);\n                } else if (_this.isPosterElement(target)) {\n                    _this.LGel.trigger(lGEvents.posterClick);\n                }\n                // Prevent execution on click\n                if (isDraging) {\n                    isDraging = false;\n                    _this.outer.removeClass(\"lg-grabbing\").addClass(\"lg-grab\");\n                }\n            });\n        }\n    };\n    LightGallery.prototype.triggerPosterClick = function() {\n        var _this = this;\n        this.$inner.on(\"click.lg\", function(event) {\n            if (!_this.dragOrSwipeEnabled && _this.isPosterElement($LG(event.target))) {\n                _this.LGel.trigger(lGEvents.posterClick);\n            }\n        });\n    };\n    LightGallery.prototype.manageSwipeClass = function() {\n        var _touchNext = this.index + 1;\n        var _touchPrev = this.index - 1;\n        if (this.settings.loop && this.galleryItems.length > 2) {\n            if (this.index === 0) {\n                _touchPrev = this.galleryItems.length - 1;\n            } else if (this.index === this.galleryItems.length - 1) {\n                _touchNext = 0;\n            }\n        }\n        this.outer.find(\".lg-item\").removeClass(\"lg-next-slide lg-prev-slide\");\n        if (_touchPrev > -1) {\n            this.getSlideItem(_touchPrev).addClass(\"lg-prev-slide\");\n        }\n        this.getSlideItem(_touchNext).addClass(\"lg-next-slide\");\n    };\n    /**\r\n     * Go to next slide\r\n     * @param {Boolean} fromTouch - true if slide function called via touch event\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  plugin.goToNextSlide();\r\n     * @see <a href=\"/demos/methods/\">Demo</a>\r\n     */ LightGallery.prototype.goToNextSlide = function(fromTouch) {\n        var _this = this;\n        var _loop = this.settings.loop;\n        if (fromTouch && this.galleryItems.length < 3) {\n            _loop = false;\n        }\n        if (!this.lgBusy) {\n            if (this.index + 1 < this.galleryItems.length) {\n                this.index++;\n                this.LGel.trigger(lGEvents.beforeNextSlide, {\n                    index: this.index\n                });\n                this.slide(this.index, !!fromTouch, false, \"next\");\n            } else {\n                if (_loop) {\n                    this.index = 0;\n                    this.LGel.trigger(lGEvents.beforeNextSlide, {\n                        index: this.index\n                    });\n                    this.slide(this.index, !!fromTouch, false, \"next\");\n                } else if (this.settings.slideEndAnimation && !fromTouch) {\n                    this.outer.addClass(\"lg-right-end\");\n                    setTimeout(function() {\n                        _this.outer.removeClass(\"lg-right-end\");\n                    }, 400);\n                }\n            }\n        }\n    };\n    /**\r\n     * Go to previous slides\r\n     * @param {Boolean} fromTouch - true if slide function called via touch event\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery({});\r\n     *  plugin.goToPrevSlide();\r\n     * @see <a href=\"/demos/methods/\">Demo</a>\r\n     *\r\n     */ LightGallery.prototype.goToPrevSlide = function(fromTouch) {\n        var _this = this;\n        var _loop = this.settings.loop;\n        if (fromTouch && this.galleryItems.length < 3) {\n            _loop = false;\n        }\n        if (!this.lgBusy) {\n            if (this.index > 0) {\n                this.index--;\n                this.LGel.trigger(lGEvents.beforePrevSlide, {\n                    index: this.index,\n                    fromTouch: fromTouch\n                });\n                this.slide(this.index, !!fromTouch, false, \"prev\");\n            } else {\n                if (_loop) {\n                    this.index = this.galleryItems.length - 1;\n                    this.LGel.trigger(lGEvents.beforePrevSlide, {\n                        index: this.index,\n                        fromTouch: fromTouch\n                    });\n                    this.slide(this.index, !!fromTouch, false, \"prev\");\n                } else if (this.settings.slideEndAnimation && !fromTouch) {\n                    this.outer.addClass(\"lg-left-end\");\n                    setTimeout(function() {\n                        _this.outer.removeClass(\"lg-left-end\");\n                    }, 400);\n                }\n            }\n        }\n    };\n    LightGallery.prototype.keyPress = function() {\n        var _this = this;\n        $LG(window).on(\"keydown.lg.global\" + this.lgId, function(e) {\n            if (_this.lgOpened && _this.settings.escKey === true && e.keyCode === 27) {\n                e.preventDefault();\n                if (_this.settings.allowMediaOverlap && _this.outer.hasClass(\"lg-can-toggle\") && _this.outer.hasClass(\"lg-components-open\")) {\n                    _this.outer.removeClass(\"lg-components-open\");\n                } else {\n                    _this.closeGallery();\n                }\n            }\n            if (_this.lgOpened && _this.galleryItems.length > 1) {\n                if (e.keyCode === 37) {\n                    e.preventDefault();\n                    _this.goToPrevSlide();\n                }\n                if (e.keyCode === 39) {\n                    e.preventDefault();\n                    _this.goToNextSlide();\n                }\n            }\n        });\n    };\n    LightGallery.prototype.arrow = function() {\n        var _this = this;\n        this.getElementById(\"lg-prev\").on(\"click.lg\", function() {\n            _this.goToPrevSlide();\n        });\n        this.getElementById(\"lg-next\").on(\"click.lg\", function() {\n            _this.goToNextSlide();\n        });\n    };\n    LightGallery.prototype.arrowDisable = function(index) {\n        // Disable arrows if settings.hideControlOnEnd is true\n        if (!this.settings.loop && this.settings.hideControlOnEnd) {\n            var $prev = this.getElementById(\"lg-prev\");\n            var $next = this.getElementById(\"lg-next\");\n            if (index + 1 === this.galleryItems.length) {\n                $next.attr(\"disabled\", \"disabled\").addClass(\"disabled\");\n            } else {\n                $next.removeAttr(\"disabled\").removeClass(\"disabled\");\n            }\n            if (index === 0) {\n                $prev.attr(\"disabled\", \"disabled\").addClass(\"disabled\");\n            } else {\n                $prev.removeAttr(\"disabled\").removeClass(\"disabled\");\n            }\n        }\n    };\n    LightGallery.prototype.setTranslate = function($el, xValue, yValue, scaleX, scaleY) {\n        if (scaleX === void 0) {\n            scaleX = 1;\n        }\n        if (scaleY === void 0) {\n            scaleY = 1;\n        }\n        $el.css(\"transform\", \"translate3d(\" + xValue + \"px, \" + yValue + \"px, 0px) scale3d(\" + scaleX + \", \" + scaleY + \", 1)\");\n    };\n    LightGallery.prototype.mousewheel = function() {\n        var _this = this;\n        var lastCall = 0;\n        this.outer.on(\"wheel.lg\", function(e) {\n            if (!e.deltaY || _this.galleryItems.length < 2) {\n                return;\n            }\n            e.preventDefault();\n            var now = new Date().getTime();\n            if (now - lastCall < 1000) {\n                return;\n            }\n            lastCall = now;\n            if (e.deltaY > 0) {\n                _this.goToNextSlide();\n            } else if (e.deltaY < 0) {\n                _this.goToPrevSlide();\n            }\n        });\n    };\n    LightGallery.prototype.isSlideElement = function(target) {\n        return target.hasClass(\"lg-outer\") || target.hasClass(\"lg-item\") || target.hasClass(\"lg-img-wrap\");\n    };\n    LightGallery.prototype.isPosterElement = function(target) {\n        var playButton = this.getSlideItem(this.index).find(\".lg-video-play-button\").get();\n        return target.hasClass(\"lg-video-poster\") || target.hasClass(\"lg-video-play-button\") || playButton && playButton.contains(target.get());\n    };\n    /**\r\n     * Maximize minimize inline gallery.\r\n     * @category lGPublicMethods\r\n     */ LightGallery.prototype.toggleMaximize = function() {\n        var _this = this;\n        this.getElementById(\"lg-maximize\").on(\"click.lg\", function() {\n            _this.$container.toggleClass(\"lg-inline\");\n            _this.refreshOnResize();\n        });\n    };\n    LightGallery.prototype.invalidateItems = function() {\n        for(var index = 0; index < this.items.length; index++){\n            var element = this.items[index];\n            var $element = $LG(element);\n            $element.off(\"click.lgcustom-item-\" + $element.attr(\"data-lg-id\"));\n        }\n    };\n    LightGallery.prototype.trapFocus = function() {\n        var _this = this;\n        this.$container.get().focus({\n            preventScroll: true\n        });\n        $LG(window).on(\"keydown.lg.global\" + this.lgId, function(e) {\n            if (!_this.lgOpened) {\n                return;\n            }\n            var isTabPressed = e.key === \"Tab\" || e.keyCode === 9;\n            if (!isTabPressed) {\n                return;\n            }\n            var focusableEls = utils.getFocusableElements(_this.$container.get());\n            var firstFocusableEl = focusableEls[0];\n            var lastFocusableEl = focusableEls[focusableEls.length - 1];\n            if (e.shiftKey) {\n                if (document.activeElement === firstFocusableEl) {\n                    lastFocusableEl.focus();\n                    e.preventDefault();\n                }\n            } else {\n                if (document.activeElement === lastFocusableEl) {\n                    firstFocusableEl.focus();\n                    e.preventDefault();\n                }\n            }\n        });\n    };\n    LightGallery.prototype.manageCloseGallery = function() {\n        var _this = this;\n        if (!this.settings.closable) return;\n        var mousedown = false;\n        this.getElementById(\"lg-close\").on(\"click.lg\", function() {\n            _this.closeGallery();\n        });\n        if (this.settings.closeOnTap) {\n            // If you drag the slide and release outside gallery gets close on chrome\n            // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer\n            this.outer.on(\"mousedown.lg\", function(e) {\n                var target = $LG(e.target);\n                if (_this.isSlideElement(target)) {\n                    mousedown = true;\n                } else {\n                    mousedown = false;\n                }\n            });\n            this.outer.on(\"mousemove.lg\", function() {\n                mousedown = false;\n            });\n            this.outer.on(\"mouseup.lg\", function(e) {\n                var target = $LG(e.target);\n                if (_this.isSlideElement(target) && mousedown) {\n                    if (!_this.outer.hasClass(\"lg-dragging\")) {\n                        _this.closeGallery();\n                    }\n                }\n            });\n        }\n    };\n    /**\r\n     * Close lightGallery if it is opened.\r\n     *\r\n     * @description If closable is false in the settings, you need to pass true via closeGallery method to force close gallery\r\n     * @return returns the estimated time to close gallery completely including the close animation duration\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  plugin.closeGallery();\r\n     *\r\n     */ LightGallery.prototype.closeGallery = function(force) {\n        var _this = this;\n        if (!this.lgOpened || !this.settings.closable && !force) {\n            return 0;\n        }\n        this.LGel.trigger(lGEvents.beforeClose);\n        if (this.settings.resetScrollPosition && !this.settings.hideScrollbar) {\n            $LG(window).scrollTop(this.prevScrollTop);\n        }\n        var currentItem = this.items[this.index];\n        var transform;\n        if (this.zoomFromOrigin && currentItem) {\n            var _a = this.mediaContainerPosition, top_4 = _a.top, bottom = _a.bottom;\n            var _b = this.galleryItems[this.index], __slideVideoInfo = _b.__slideVideoInfo, poster = _b.poster;\n            var imageSize = utils.getSize(currentItem, this.outer, top_4 + bottom, __slideVideoInfo && poster && this.settings.videoMaxSize);\n            transform = utils.getTransform(currentItem, this.outer, top_4, bottom, imageSize);\n        }\n        if (this.zoomFromOrigin && transform) {\n            this.outer.addClass(\"lg-closing lg-zoom-from-image\");\n            this.getSlideItem(this.index).addClass(\"lg-start-end-progress\").css(\"transition-duration\", this.settings.startAnimationDuration + \"ms\").css(\"transform\", transform);\n        } else {\n            this.outer.addClass(\"lg-hide-items\");\n            // lg-zoom-from-image is used for setting the opacity to 1 if zoomFromOrigin is true\n            // If the closing item doesn't have the lg-size attribute, remove this class to avoid the closing css conflicts\n            this.outer.removeClass(\"lg-zoom-from-image\");\n        }\n        // Unbind all events added by lightGallery\n        // @todo\n        //this.$el.off('.lg.tm');\n        this.destroyModules();\n        this.lGalleryOn = false;\n        this.isDummyImageRemoved = false;\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\n        clearTimeout(this.hideBarTimeout);\n        this.hideBarTimeout = false;\n        $LG(\"html\").removeClass(\"lg-on\");\n        this.outer.removeClass(\"lg-visible lg-components-open\");\n        // Resetting opacity to 0 isd required as  vertical swipe to close function adds inline opacity.\n        this.$backdrop.removeClass(\"in\").css(\"opacity\", 0);\n        var removeTimeout = this.zoomFromOrigin && transform ? Math.max(this.settings.startAnimationDuration, this.settings.backdropDuration) : this.settings.backdropDuration;\n        this.$container.removeClass(\"lg-show-in\");\n        // Once the closign animation is completed and gallery is invisible\n        setTimeout(function() {\n            if (_this.zoomFromOrigin && transform) {\n                _this.outer.removeClass(\"lg-zoom-from-image\");\n            }\n            _this.$container.removeClass(\"lg-show\");\n            // Reset scrollbar\n            _this.resetScrollBar();\n            // Need to remove inline opacity as it is used in the stylesheet as well\n            _this.$backdrop.removeAttr(\"style\").css(\"transition-duration\", _this.settings.backdropDuration + \"ms\");\n            _this.outer.removeClass(\"lg-closing \" + _this.settings.startClass);\n            _this.getSlideItem(_this.index).removeClass(\"lg-start-end-progress\");\n            _this.$inner.empty();\n            if (_this.lgOpened) {\n                _this.LGel.trigger(lGEvents.afterClose, {\n                    instance: _this\n                });\n            }\n            if (_this.$container.get()) {\n                _this.$container.get().blur();\n            }\n            _this.lgOpened = false;\n        }, removeTimeout + 100);\n        return removeTimeout + 100;\n    };\n    LightGallery.prototype.initModules = function() {\n        this.plugins.forEach(function(module) {\n            try {\n                module.init();\n            } catch (err) {\n                console.warn(\"lightGallery:- make sure lightGallery module is properly initiated\");\n            }\n        });\n    };\n    LightGallery.prototype.destroyModules = function(destroy) {\n        this.plugins.forEach(function(module) {\n            try {\n                if (destroy) {\n                    module.destroy();\n                } else {\n                    module.closeGallery && module.closeGallery();\n                }\n            } catch (err) {\n                console.warn(\"lightGallery:- make sure lightGallery module is properly destroyed\");\n            }\n        });\n    };\n    /**\r\n     * Refresh lightGallery with new set of children.\r\n     *\r\n     * @description This is useful to update the gallery when the child elements are changed without calling destroy method.\r\n     *\r\n     * If you are using dynamic mode, you can pass the modified array of dynamicEl as the first parameter to refresh the dynamic gallery\r\n     * @see <a href=\"/demos/dynamic-mode/\">Demo</a>\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  // Delete or add children, then call\r\n     *  plugin.refresh();\r\n     *\r\n     */ LightGallery.prototype.refresh = function(galleryItems) {\n        if (!this.settings.dynamic) {\n            this.invalidateItems();\n        }\n        if (galleryItems) {\n            this.galleryItems = galleryItems;\n        } else {\n            this.galleryItems = this.getItems();\n        }\n        this.updateControls();\n        this.openGalleryOnItemClick();\n        this.LGel.trigger(lGEvents.updateSlides);\n    };\n    LightGallery.prototype.updateControls = function() {\n        this.addSlideVideoInfo(this.galleryItems);\n        this.updateCounterTotal();\n        this.manageSingleSlideClassName();\n    };\n    LightGallery.prototype.destroyGallery = function() {\n        this.destroyModules(true);\n        if (!this.settings.dynamic) {\n            this.invalidateItems();\n        }\n        $LG(window).off(\".lg.global\" + this.lgId);\n        this.LGel.off(\".lg\");\n        this.$container.remove();\n    };\n    /**\r\n     * Destroy lightGallery.\r\n     * Destroy lightGallery and its plugin instances completely\r\n     *\r\n     * @description This method also calls CloseGallery function internally. Returns the time takes to completely close and destroy the instance.\r\n     * In case if you want to re-initialize lightGallery right after destroying it, initialize it only once the destroy process is completed.\r\n     * You can use refresh method most of the times.\r\n     * @category lGPublicMethods\r\n     * @example\r\n     *  const plugin = lightGallery();\r\n     *  plugin.destroy();\r\n     *\r\n     */ LightGallery.prototype.destroy = function() {\n        var closeTimeout = this.closeGallery(true);\n        if (closeTimeout) {\n            setTimeout(this.destroyGallery.bind(this), closeTimeout);\n        } else {\n            this.destroyGallery();\n        }\n        return closeTimeout;\n    };\n    return LightGallery;\n}();\nfunction lightGallery(el, options) {\n    return new LightGallery(el, options);\n}\nvar LgMethods = {\n    onAfterAppendSlide: \"lgAfterAppendSlide\",\n    onInit: \"lgInit\",\n    onHasVideo: \"lgHasVideo\",\n    onContainerResize: \"lgContainerResize\",\n    onUpdateSlides: \"lgUpdateSlides\",\n    onAfterAppendSubHtml: \"lgAfterAppendSubHtml\",\n    onBeforeOpen: \"lgBeforeOpen\",\n    onAfterOpen: \"lgAfterOpen\",\n    onSlideItemLoad: \"lgSlideItemLoad\",\n    onBeforeSlide: \"lgBeforeSlide\",\n    onAfterSlide: \"lgAfterSlide\",\n    onPosterClick: \"lgPosterClick\",\n    onDragStart: \"lgDragStart\",\n    onDragMove: \"lgDragMove\",\n    onDragEnd: \"lgDragEnd\",\n    onBeforeNextSlide: \"lgBeforeNextSlide\",\n    onBeforePrevSlide: \"lgBeforePrevSlide\",\n    onBeforeClose: \"lgBeforeClose\",\n    onAfterClose: \"lgAfterClose\",\n    onRotateLeft: \"lgRotateLeft\",\n    onRotateRight: \"lgRotateRight\",\n    onFlipHorizontal: \"lgFlipHorizontal\",\n    onFlipVertical: \"lgFlipVertical\"\n};\nvar LG = function(_a) {\n    var children = _a.children, elementClassNames = _a.elementClassNames, onAfterAppendSlide = _a.onAfterAppendSlide, onInit = _a.onInit, onHasVideo = _a.onHasVideo, onContainerResize = _a.onContainerResize, onAfterAppendSubHtml = _a.onAfterAppendSubHtml, onBeforeOpen = _a.onBeforeOpen, onAfterOpen = _a.onAfterOpen, onSlideItemLoad = _a.onSlideItemLoad, onBeforeSlide = _a.onBeforeSlide, onAfterSlide = _a.onAfterSlide, onPosterClick = _a.onPosterClick, onDragStart = _a.onDragStart, onDragMove = _a.onDragMove, onDragEnd = _a.onDragEnd, onBeforeNextSlide = _a.onBeforeNextSlide, onBeforePrevSlide = _a.onBeforePrevSlide, onBeforeClose = _a.onBeforeClose, onAfterClose = _a.onAfterClose, onRotateLeft = _a.onRotateLeft, onRotateRight = _a.onRotateRight, onFlipHorizontal = _a.onFlipHorizontal, onFlipVertical = _a.onFlipVertical, restProps = __rest(_a, [\n        \"children\",\n        \"elementClassNames\",\n        \"onAfterAppendSlide\",\n        \"onInit\",\n        \"onHasVideo\",\n        \"onContainerResize\",\n        \"onAfterAppendSubHtml\",\n        \"onBeforeOpen\",\n        \"onAfterOpen\",\n        \"onSlideItemLoad\",\n        \"onBeforeSlide\",\n        \"onAfterSlide\",\n        \"onPosterClick\",\n        \"onDragStart\",\n        \"onDragMove\",\n        \"onDragEnd\",\n        \"onBeforeNextSlide\",\n        \"onBeforePrevSlide\",\n        \"onBeforeClose\",\n        \"onAfterClose\",\n        \"onRotateLeft\",\n        \"onRotateRight\",\n        \"onFlipHorizontal\",\n        \"onFlipVertical\"\n    ]);\n    var $lg = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var registerEvents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        if (onAfterAppendSlide && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onAfterAppendSlide, function(event) {\n                onAfterAppendSlide(event.detail);\n            });\n        }\n        if (onInit && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onInit, function(event) {\n                onInit(event.detail);\n            });\n        }\n        if (onHasVideo && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onHasVideo, function(event) {\n                onHasVideo(event.detail);\n            });\n        }\n        if (onContainerResize && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onContainerResize, function(event) {\n                onContainerResize(event.detail);\n            });\n        }\n        if (onAfterAppendSubHtml && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onAfterAppendSubHtml, function(event) {\n                onAfterAppendSubHtml(event.detail);\n            });\n        }\n        if (onBeforeOpen && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onBeforeOpen, function(event) {\n                onBeforeOpen(event.detail);\n            });\n        }\n        if (onAfterOpen && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onAfterOpen, function(event) {\n                onAfterOpen(event.detail);\n            });\n        }\n        if (onSlideItemLoad && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onSlideItemLoad, function(event) {\n                onSlideItemLoad(event.detail);\n            });\n        }\n        if (onBeforeSlide && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onBeforeSlide, function(event) {\n                onBeforeSlide(event.detail);\n            });\n        }\n        if (onAfterSlide && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onAfterSlide, function(event) {\n                onAfterSlide(event.detail);\n            });\n        }\n        if (onPosterClick && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onPosterClick, function(event) {\n                onPosterClick(event.detail);\n            });\n        }\n        if (onDragStart && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onDragStart, function(event) {\n                onDragStart(event.detail);\n            });\n        }\n        if (onDragMove && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onDragMove, function(event) {\n                onDragMove(event.detail);\n            });\n        }\n        if (onDragEnd && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onDragEnd, function(event) {\n                onDragEnd(event.detail);\n            });\n        }\n        if (onBeforeNextSlide && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onBeforeNextSlide, function(event) {\n                onBeforeNextSlide(event.detail);\n            });\n        }\n        if (onBeforePrevSlide && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onBeforePrevSlide, function(event) {\n                onBeforePrevSlide(event.detail);\n            });\n        }\n        if (onBeforeClose && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onBeforeClose, function(event) {\n                onBeforeClose(event.detail);\n            });\n        }\n        if (onAfterClose && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onAfterClose, function(event) {\n                onAfterClose(event.detail);\n            });\n        }\n        if (onRotateLeft && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onRotateLeft, function(event) {\n                onRotateLeft(event.detail);\n            });\n        }\n        if (onRotateRight && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onRotateRight, function(event) {\n                onRotateRight(event.detail);\n            });\n        }\n        if (onFlipHorizontal && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onFlipHorizontal, function(event) {\n                onFlipHorizontal(event.detail);\n            });\n        }\n        if (onFlipVertical && $lg && $lg.current) {\n            $lg.current.addEventListener(LgMethods.onFlipVertical, function(event) {\n                onFlipVertical(event.detail);\n            });\n        }\n    }, [\n        onAfterAppendSlide,\n        onAfterAppendSubHtml,\n        onAfterClose,\n        onRotateLeft,\n        onRotateRight,\n        onFlipHorizontal,\n        onFlipVertical,\n        onAfterOpen,\n        onAfterSlide,\n        onBeforeClose,\n        onBeforeNextSlide,\n        onBeforeOpen,\n        onBeforePrevSlide,\n        onBeforeSlide,\n        onContainerResize,\n        onDragEnd,\n        onDragMove,\n        onDragStart,\n        onHasVideo,\n        onInit,\n        onPosterClick,\n        onSlideItemLoad\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        registerEvents();\n        var lightGallery$1 = lightGallery($lg.current, restProps);\n        return function cleanup() {\n            lightGallery$1.destroy();\n        };\n    }, [\n        registerEvents,\n        restProps\n    ]);\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(\"div\", {\n        className: \"lg-react-element \" + (elementClassNames ? elementClassNames : \"\"),\n        ref: $lg\n    }, children);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LG); //# sourceMappingURL=Lightgallery.es5.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/react/Lightgallery.es5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/css/lg-thumbnail.css":
/*!********************************************************!*\
  !*** ./node_modules/lightgallery/css/lg-thumbnail.css ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"2dbf31239fde\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9sZy10aHVtYm5haWwuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFydGZ1cnlfcmVhY3QvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9sZy10aHVtYm5haWwuY3NzPzJlZTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIyZGJmMzEyMzlmZGVcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/css/lg-thumbnail.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/css/lg-zoom.css":
/*!***************************************************!*\
  !*** ./node_modules/lightgallery/css/lg-zoom.css ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"5a55e3d45137\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9sZy16b29tLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hcnRmdXJ5X3JlYWN0Ly4vbm9kZV9tb2R1bGVzL2xpZ2h0Z2FsbGVyeS9jc3MvbGctem9vbS5jc3M/ZGU2NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjVhNTVlM2Q0NTEzN1wiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/css/lg-zoom.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/css/lightgallery.css":
/*!********************************************************!*\
  !*** ./node_modules/lightgallery/css/lightgallery.css ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"3bf4401d7738\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9saWdodGdhbGxlcnkuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFydGZ1cnlfcmVhY3QvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L2Nzcy9saWdodGdhbGxlcnkuY3NzP2M5OTgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIzYmY0NDAxZDc3MzhcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/css/lightgallery.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/scss/lg-zoom.scss":
/*!*****************************************************!*\
  !*** ./node_modules/lightgallery/scss/lg-zoom.scss ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"045f66e2e8c9\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L3Njc3MvbGctem9vbS5zY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFydGZ1cnlfcmVhY3QvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L3Njc3MvbGctem9vbS5zY3NzPzVkZjAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIwNDVmNjZlMmU4YzlcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/scss/lg-zoom.scss\n");

/***/ }),

/***/ "(ssr)/./node_modules/lightgallery/scss/lightgallery.scss":
/*!**********************************************************!*\
  !*** ./node_modules/lightgallery/scss/lightgallery.scss ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"ea42a5ebe080\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbGlnaHRnYWxsZXJ5L3Njc3MvbGlnaHRnYWxsZXJ5LnNjc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXJ0ZnVyeV9yZWFjdC8uL25vZGVfbW9kdWxlcy9saWdodGdhbGxlcnkvc2Nzcy9saWdodGdhbGxlcnkuc2Nzcz9iNDM0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiZWE0MmE1ZWJlMDgwXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/lightgallery/scss/lightgallery.scss\n");

/***/ })

};
;